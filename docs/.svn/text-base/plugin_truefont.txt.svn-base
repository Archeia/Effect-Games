=article_title TrueFont
=article_path /plugins
=article_tags plugin, font, text
=article_stags sidebar_plugins
=article_comments 1
=section_numbers 1
=toc 1

=section i. Version History

=table
	Version | Date | Author | Description
	1.0b | 06/16/2009 | [#User/jhuckaby jhuckaby] | Initial beta release.

=section #. Overview

The *TrueFont* Plugin allows you to render text from actual [wikipedia:OpenType] or [wikipedia:TrueType] fonts, and use the rendered text in your games.  This is different from the built-in Effect Bitmap Fonts, in that the output can be variable-width, and supports things like kerning and word wrap.  Example uses include game story, character dialog, level introductions, and game play instructions.

The Plugin works by pre-rendering the text on the server, and returning an image ([wikipedia:PNG], [wikipedia:GIF] or [wikipedia:JPEG]) for use in a custom sprite.  You must provide the actual source font, and upload it as an asset to your game.  Your text strings must be stored in an [wikipedia:XML] asset.

=section #. Usage

The following subsections describe how to use the TrueFont Plugin.

=section #.#. Assets

To use TrueFont, you need both a source font file (OpenType or TrueType), and an XML file containing strings.

=section #.#.#. Source Font

Upload your favorite font as an asset to your game, and note the location (which folder it is in).  If you don't have any fonts or are worried about font copyright issues, consider using one of these free fonts:

=list
	[/effect/fonts/helvetiker.zip Helvetiker]
	[/effect/fonts/optimer.zip Optimer]
	[/effect/fonts/gentilis.zip Gentilis]

Only [wikipedia:OpenType] and [wikipedia:TrueType] formats are supported at this time.

=section #.#.#. XML Asset

You must provide your text strings in an XML file, and upload it as an asset to your game.  You can easily edit the file online, by clicking the "Edit..." button or double-clicking the asset.  The XML format can be anything you like, but here is a simple example:

=syntax xml
	<?xml version="1.0"?>
	<Strings>
		<Instructions>Use arrow keys to move, and space bar to jump.</Instructions>
		<LevelIntros>
			<Level1>This is the intro to level 1.  Good luck!</Level1>
			<Level2>Level 2 is much harder.  Will you survive?</Level2>
		</LevelIntros>
		<GameStory>
			<Page1>Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.</Page1>
			<Page2>Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.</Page2>
		</GameStory>
	</Strings>

The XML structure can be laid out however you like, and the text strings may contain multiple lines.  Remember that XML files must only have a single root node (in this case {<Strings>}).  To specify which text strings to load, you use [wikipedia:XPath 1.0] syntax (see [Parameters] below).

=section #.#. Enabling the Plugin

To enable the TrueFont Plugin for your game, simply navigate to the main game screen (in the "Game" tab) and click the "*Game Settings...*" button.  On this page, scroll to the bottom and locate the "Plugins" list.  Click on the TrueFont Plugin to activate it (remember you must hold Shift or Ctrl to select multiple Plugins), and then click "*Save Changes*".

=section #.#. The TrueFontSprite Class

The TrueFont Plugin creates a new class, {TrueFontSprite}, which you can subclass for use in your game.  Simply specify the font, XML file, text string XPath and a number of parameters (see below), and then you can use it like any other sprite.  Here is a simple example:

=syntax js
	TrueFontSprite.extend('MyFontSprite', {
		width: 256,
		height: 256,
		background: 'transparent',
		fontAsset: '/fonts/helvetiker_bold.ttf',
		xmlAsset: '/text/strings.xml',
		xPath: '/LevelIntros/Level1',
		pointSize: 18,
		textColor: '#0000ff',
		textOpacity: 1.0,
		textKerning: 0.0,
		textAlign: 'center',
		antiAlias: true,
		wordWrap: true,
		imageFormat: 'png',
		
		logic: function(clock) {
			// your logic routine here
		}
	});

The sprite will automatically render the text located at the XPath {/LevelIntros/Level1} in the XML asset {/text/strings.xml} using the font asset {/fonts/helvetiker_bold.ttf}.  The image will be returned as a PNG (with an alpha transparent background) and set as the source image for the sprite.  See the following section for descriptions of all the parameters used in the class.

You can feel free to animate the sprite as you normally would using {logic()} and/or {draw()} routines.  This is basically just a normal sprite with a few tweaks to auto-load the image containing your rendered text from the server.

Remember to define your sprite class (in this case {MyFontSprite}) in your game, and set it to preload, or use it in a level so it gets loaded when the level does.

=section #.#. Parameters

Here are all the parameters you can set for your TrueFontSprite subclass.  Please note these must be defined in the class, not on actual sprite instances.

=section #.#.#. width / height

These are the pixel width and height for your sprite, which your text must fit into.  This is essentially the "canvas size" for your text to be rendered on.

=section #.#.#. background

The "{background}" parameter controls the background color for your sprite, which can either be a 6-digit hex RGB triplet (i.e. "{#FF0000}) or a name such as "black", "white" or "transparent".  The latter implies a fully transparent background, useful for PNG based images.

=section #.#.#. fontAsset

The "{fontAsset}" parameter should be set to the location of your font (OpenType or TrueType) in your game assets, including the name of any folders.  Be sure to including a leading slash.  For example, if you uploaded the font "{helvetiker_bold.ttf}" to the folder "{fonts}", then you would set the {fontAsset} parameter to "{/fonts/helvetiker_bold.ttf}".

=section #.#.#. xmlAsset

The "{xmlAsset}" parameter should be set to the location of your XML file in your game assets, including the name of any folders.  Be sure to include a leading slash.  For example, if you uploaded the XML file "{strings.xml}" to the folder "{text}", then you would set the {xmlAsset} parameter to "{/text/strings.xml}".

Since all the rendering happens on the server, you do *not* have to load the XML file in your game.  Meaning, there is no need to define it as a resource on the sprite, level, or have it preload with the game.

=section #.#.#. xPath

The "{xPath}" parameter should be set to the location of the desired string inside the XML file, using XPath syntax.  For example, given the sample XML file contents shown above, here are the XPaths to all 5 strings in the file:

=list
	{/Instructions}
	{/LevelIntros/Level1}
	{/LevelIntros/Level2}
	{/GameStory/Page1}
	{/GameStory/Page2}

Notice that each path has a leading slash, and that the root XML node name (i.e. {<Strings>}) is missing from the XPaths.  Only simple XPaths are supported as of this writing, but you can do array indexing (multiple elements with the same name are considered an array).  Example XML:

=syntax xml
	<?xml version="1.0"?>
	<Strings>
		<String>This is the first element in the array.</String>
		<String>This is the second element in the array.</String>
	</Strings>

The two XPaths for the strings above would be "{/String[0]}" and "{/String[1]}".  Finally, you can lookup array elements using criteria, such as a matching attribute.  For example, consider this XML snippet:

=syntax xml
	<?xml version="1.0"?>
	<Strings>
		<String ID="772">This is some text.</String>
		<Stirng ID="100">This is some different text.</String>
	</Strings>

The two XPaths for the strings above could be looked up like this: "{/Strings/String[@ID='772']/content}" and "{/Strings/String[@ID='100']/content}".  Note that the keyword "{content}" is special in that it refers to the plain text content of a node, if it also contains attributes.

=section #.#.#. pointSize

The "{pointSize}" parameter should be set to the desired font point size.  Any integer value between 1 and 200 is acceptable, but the actual rendered size of the font can vary.

=section #.#.#. textColor

The "{textColor}" parameter should be set to the desired color of the text.  You can specify a 6-digit hex RGB triplet (i.e. "{#FF0000}) or a name such as "black" or "white".

=section #.#.#. textOpacity

The "{textOpacity}" parameter should be set to the desired opacity for the text, between 0.0 and 1.0.  A value of 0.0 means totally transparent, and 1.0 means totally opaque.

=section #.#.#. textKerning

The "{textKerning}" parameter should be set to the desired kerning (space between the characters).  A value of 0.0 is the default kerning for the font.  Values greater than 0.0 increase the spacing between characters, and values less then 0.0 decrease it.

=section #.#.#. textAlign

The "{textAlign}" parameter controls both the horizontal and vertical text alignment.  Specify one of the following values:

=list
	NorthWest
	North
	NorthEast
	East
	SouthEast
	South
	SouthWest
	West
	Center

=section #.#.#. antiAlias

The "{antiAlias}" parameter controls whether the text is rendered with antialiasing or not.  Specify a boolean {true} or {false} here.

=section #.#.#. wordWrap

The "{wordWrap}" parameter controls whether words will wrap to the next line, or not.  Specify a boolean {true} or {false} here.  If set to true, the rendering engine will try to break only on word boundaries, but if a word is too long to fit on a line by itself, it will be broken up.

=section #.#.#. imageFormat

The "{imageFormat}" parameter controls the image format.  Should be set to "{png}", "{gif}" or "{jpeg}".  PNG is the only format that supports true alpha transparency.

=section #.#. Preloading Multiple Strings

Images must be preloaded in the Effect Engine.  You cannot specify dynamic text and have it rendered on-demand.  The reason is that the server may take time to render the image, and this delay is undesirable during game play.  So you must specify your XPath beforehand, so the images are loaded when the game (or level) loads.  However, you can specify a list of multiple XPaths to preload, and then switch between them on-demand, even during game play.  Here is how.

First, you must call the static {preload()} function on your class (it is inherited from the {TrueFontSprite} class) and pass an array of XPaths.  You need to do this before the game loads.  Note that this is called statically on the class constructor, not on a sprite instance.  Example:

=syntax js
	MyFontSprite.preload( [
		"/LevelIntros/Level1",
		"/LevelIntros/Level2"
	] );

This will instruct the engine to pre-render text for *both* XPaths when your sprite class is loaded (either on game load or level load, however you have the Sprite configured).  You must of course set all the other parameters (font, XML, color, etc.) as class variables.

Then, you can switch between the XPaths at any time, which immediately swaps the images, by calling the instance method "{setXPath()}" (also inherited from {TrueFontSprite}).  Example:

=syntax js
	mysprite.setXPath( "/LevelIntros/Level2" );

Remember that the XPath must have been pre-registered using {preload()}, and that {setXPath()} is an instance method, not a static function.

=section #. Source Code

Here is the raw source code for the TrueFont Plugin:

=table
	Version | Source URL
	1.0b | [http://www.effectgames.com/effect/engine/plugins/TrueFont/1.0b.js]

=section #. Future

Here is a list of future features planned for the Plugin:

=list
	Rotation, and skew transforms.
	Drop shadows and glows.
	Gradient overlays.
	Dynamic text (on-demand text, i.e. not from preset XML strings).

=section #. Examples

=list
	[/effect/example.psp.html?rev=truefont Example of using the TrueFont Plugin]

=section #. Copyright

Copyright &copy; 2009 Effect Games LLC and Joseph Huckaby.  This Plugin source code is released under the [http://www.opensource.org/licenses/lgpl-3.0.html GNU Lesser General Public License v3.0].

Please note that you are responsible for the fonts used in your games.  Beware of copyrighted fonts!  Be sure to read the font copyright notice, and make you have permission to use it.  Effect Games reserves the right to remove any games from its servers that use copyrighted material.
