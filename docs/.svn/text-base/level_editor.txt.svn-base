=article_title Level Editor Guide
=article_path /docs
=article_tags docs, levels, tiles, tilesets, sprites, environments
=article_stags sidebar_docs
=article_comments 1
=section_numbers 1
=toc 1
=toc_max 3

=section #. Overview

This document describes how to use the Effect Level Editor, which is a web-based tool for designing levels to be used in your games.  A level is basically a collection of sprite and/or tile layers, which are pre-populated with objects that you put into place.  Then, when you load levels, all the appropriate layers are created, and all your objects are created and placed into the game world.

The document also covers [Environments], which are custom image filters applied to any or all of the images in your level.

=section #.#. Levels Tab

Levels and Environments are both managed from the "Levels" tab.  Here is a look:

=image /effect/images/docs/getting_started/levels_tab.png style="border:0"
=caption Screenshot of Levels tab.

=section #.#. Level Property Defintions

You can define a set of "properties" for your levels.  Properties are key/value pairs which you can set for each level, and have them automatically loaded and made available to your code when the level is activated in the game engine.  Examples of properties include things like background music selection, gravity, character starting position, next level ID, etc.

On the "Levels" tab you can define the set of property definitions.  That is, the set of property names that can be filled with values for each level.  You can also choose from a number of controls (text field, drop down menu, or checkbox) for the property value.  For each type you can specify a default value for the property, and for menus you can define the set of menu items, as a comma-separated list.  Here is an example set of level property definitions:

=image /effect/images/docs/level_editor/level_prop_defs.png style="border:0"

You can define as many properties as you want, and give them all custom names.  Here are example uses for these sample properties:

=deflist
	world_num | If your game displays the level number on screen, this could be used to customize exactly what text is displayed.
	next_level | If your game has a natural progression between levels, this could be used to specify the ID of the next level to load after the current one is completed.
	background_music | This could be used to select which background music track to play for the level.
	environment | This could be used as a flag to indicate what type of environment the level has.  For example, if your game has "day" and "night" levels, this flag could be used as a hint for enemy sprites to take more damage at night, or change their behavior somehow.
	character_start | This could be used to specify the starting position for the player in the level.  An alternative here would be to define an invisible sprite class called "CharacterStart" or something, place that in the level at the correct position, and then just locate that sprite when the level loads.
	game_state | This could be used to indicate the player's state when the level loads.  For example, you could have levels that begin with the player exiting a door, or levels where the player starts on the ground, or falling from the sky.
	scroll_x_max | This could be used to limit the area in which the level can scroll, before a particular event takes place.  For example, if your level has a final boss, you may want to prevent the screen from scrolling past the boss until he is defeated.
	time_remian | This could be used to set a countdown timer for the level.

See [Level Properties] below for how this sample property set would look when editing a level.

=section #. Level Editor Usage

The Level Editor has two main sections, an [Info Editor] for editing basic level info such as the size, background, and layer definitions, and a [Map Editor] for placing tiles and sprites into the level.

=section #.#. Info Editor

The Info Editor is where you enter your level information, and the form you fill out to create new levels.  The following information is collected:

=section #.#.#. Level ID

This is a unique ID for your level, and must be entered using only alphanumeric characeters, dashes and periods.  This is so you can identify and access the level from your game code.

=section #.#.#. Level Size

This is the size of your level, specified in screens (multiples of your display size) or plain pixels.  You can change the level size at any time.

=section #.#.#. Resign Align

When editing an existing level and changing the size, this allows you to specify how the level contents should be "pinned", so you can control which side the level grows on.

=section #.#.#. Preload Level

This allows you to mark the level for preloading, so it automatically loads everything needed for the level at game startup.

=section #.#.#. Select Environment

Here you can optionally assign an environment to the level.  An environment is a custom set of image filters, such as hue, saturation, brightness, contrast, and more.  See [Environments] below for details.

=section #.#.#. Background Color

Here you can choose a background color for your level. You can always change this in your game code at any time, even during game play. This is just the initial background color applied after the level is activated.

=section #.#.#. Background Image

Optionally select a background image for your level. Once selected, you can adjust the scrolling behavior below. For more complex backgrounds, you can use a tile layer. This is just for simple, single image backgrounds.

=section #.#.#. Background Scrolling Behavior

If you selected a background image for your level, here you can set the scrolling behavior, as compared to your other layers.  For example, you may want the background to scroll slower, simulating perspective and creating a parallax effect.  To do this, select "Infinite Repeat" and set your desired scroll speed.  Values less than 1.0 are slower than normal, and 0.0 means the background will be fixed, and will not scroll at all.

=image /effect/images/docs/level_editor/info_bkgnd.png style="border:0"

Another option here is to choose "Fit to Level".  This means that the background will be scrolled in such a way that the entire level covers the area of the image completely.  For example, if your background image is exactly 2 screens wide, then it will scroll at such a speed so that when you reach the right side of the level, the backgound will also reach its right side.

=section #.#.#. Layers

Each level can have multiple sprite and/or tile layers.  These become "Planes" in your code when the level is loaded (see the [article:docs/Sprites and Tiles Guide] for details).  Each layer has its own ID, z-index and scroll speed.  For tile layers, you must also select a "Tileset" (a collection of tile graphics) for placement in the level.

=image /effect/images/docs/level_editor/info_layers.png style="border:0"

You can create as many layers as you want, but to insure your game runs smoothly on all browsers and platforms, you should try to use as few as possible.  Remember that you can designate a scrolling background image which also acts as its own layer.

=section #.#.#. Sprite Dependencies

Here you can specify which sprites need to be loaded for the level:

=image /effect/images/docs/level_editor/info_sprites.png style="border:0"

Note that Sprites placed into the level map are automatically loaded, and do not need to be listed here.  Same goes for sprites that are marked for preload.  This is for special circumstances where you need a non-placed, non-preloaded sprite to be loaded for the level.  For example, you may have code that randomly generates enemies, so you'd need to specify those enemy sprites here.

=section #.#.#. Level Resources

Here you are specify resources (assets) to be loaded with the level:

=image /effect/images/docs/level_editor/info_res.png style="border:0"

For the most part, resources are loaded automatically (like the background image, tilesets assigned to layers, sprites and tiles placed into the level map, and resources listed by those sprite classes), but you may have some special case needs.  For example, if you have background music, you should list the MP3 asset here.  If you plan to play video as a cut scene or a background layer, you should specify your video files here.

=section #.#.#. Level Properties

If you defined a set of property definitions for your levels (see [Level Property Defintions] above), you can set values for these properties when editing your level information:

=image /effect/images/docs/level_editor/info_props.png style="border:0"

These values are saved with the level data, and made available to your code when you load the level.  Here is an example code snippet which loads a level named "{MyLevel1}", and specifies a callback function which can access the level properties:

=syntax js
	Effect.Game.loadLevel( 'MyLevel1', function() {
		var props = Effect.Game.getLevelProps();
		
		assert( props.world_num == "1.1" );
		assert( props.next_level == "world-1-2-intro" );
		assert( props.background_music == "music_main" );
		assert( props.environment == "0" );
		assert( props.character_start == "40x192" );
		assert( props.game_state == "standard" );
		assert( props.scroll_x_max == "0" );
		assert( props.time_remain == "400" );
		
	});

Note that properties that contain number values still come in as strings.  If you plan to use these as numbers in your code, be sure to call the built-in JavaScript {parseInt()} or {parseFloat()} functions to convert them to whatever format you require.

See [Loading Levels] below for more details.

=section #.#. Map Editor

Once you create a level and save the information (see [Info Editor] above), you can edit the level map.  On the main "Levels" screen, click the "Edit Map" link on the level you want to edit.  This will launch the map editor:

=image /effect/images/docs/level_editor/map_main_view.png style="border:0"
=caption Level Map Editor.

This interface allows you to place tiles and/or sprites into your level.  See the following sections for details.

=section #.#.#. Basic Usage

The Map Editor works like a typical drawing application.  You select from a number of [Tools] such as the [Pencil Tool], select a layer from the [Layers Palette] and then place objects into the world by clicking.  You can place tile and sprite objects into their respective layers, and adjust their positions and properties using the [Inspector Palette].  When you are all done, click the "Save Changes" link at the top of the scree to save the level map.

=section #.#.#.#. Header Control Bar

At the top of the screen you will see a control bar:

=image /effect/images/docs/level_editor/map_header.png style="border:0"
=caption Header Control Bar.

Click the "Undo" button to undo your last change.  The editor keeps the last 100 levels of undo in memory.  Click the "Redo" button to redo a change that you previously undid.  These buttons will gray out if they are not available.

The "Zoom" menu allows you to control the zoom level of the main display.  Note that you always see the same amount of the level as you would while playing the game, but this allows you to double, triple or quadruple the size of the pixels.

The "Exit Editor" link will leave the editor without saving (you will be prompted if you have unsaved changes), and the "Save Changes" button saves the current level map changes.

=section #.#.#.#. Footer Display Bar

At the bottom of the screen you will see a display bar containing some contextual information:

=image /effect/images/docs/level_editor/map_footer.png style="border:0"
=caption Footer Display Bar.

This display bar contains the level size in pixels, the current cursor position in global world pixels (will also contain the tile indexes if the currently selected layer is a tile layer), and controls for the grid:

=section #.#.#.#.#. Grid

The Map Editor comes with a simply grid overlay feature, which shows horizontal and vertical grid lines at the intervals you select (in pixels).  Also, if the grid is enabled, sprites will "snap" to the grid edges when moving or placing new sprites.

=section #.#.#. Tools

Here are details about all the tools available in the tools palette, on the upper-left corner of the screen.

=section #.#.#.#. Select Tool

[/effect/images/icons/cursor.png] The Select Tool allows you to select existing sprites and tile objects already placed into the level.  This only works on the current layer, so make sure you select a layer first from the [Layers Palette].  Once selected, you can move the object (sprites only), and change any properties defined on the object (see the [Inspector Palette] for details).

Also, when sprites are selected, you will see a red "X" icon on the top-right corner.  Click this to delete the sprite (you can also use the [Eraser Tool]).  Finally, when a sprite is selected, you can "nudge" its position by pressing the arrow keys on the keyboard (see [Keyboard Shortcuts] for more).

=section #.#.#.#. Pencil Tool

[/effect/images/icons/pencil.png] The Pencil Tool (also referred to as the "Draw Tool") allows you to place single sprites and tiles into the level.  First select a layer from the [Layers Palette], then select an object to place from the [Tileset Palette], [Tile Class Palette] or [Sprite Class Palette]. depending on the layer type.  Finally, click anywhere in the main view to place the object(s).

For tile layers, you can hold down the mouse button and "draw" multiple tiles with one operation.  For sprite layers, each click results in a single new sprite placed at the mouse coordinates.

If the sprite or tile class has properties defined, check out the [Inspector Palette] before clicking.  There you can set property values for all new objects placed with the pencil tool (you can later adjust properties on individual objects using the [Select Tool]).

=section #.#.#.#. Paint Bucket Tool

[/effect/images/icons/paintcan.png] The Paint Bucket Tool is only used for [Tile Layers] and [Tile Data Layers].  It applies multiple tiles of the selected type to all neighboring areas which contain the same tile.  Using this you can fill entire areas (or the entire level) with the same tile.

When used on [Tile Data Layers], the algorithm actually works by reading the underlying visible tiles, not the data tiles.  For example, let's say you draw in some visible ground tiles, then you want to quickly apply a "{Ground}" tile behavior class to all the ground tiles with one click.  Just use the paint bucket tool, select the data layer, select the "{Ground}" tile class, and then click on the visual ground tiles.  The paint bucket algorithm will stop at the visual ground boundaries, and not fill the entire level with "{Ground}" objects.

=section #.#.#.#. Eraser Tool

[/effect/images/icons/eraser.png] The Eraser Tool removes tiles or sprites from the level.  First, select the desired layer from the [Layers Palette], then click on the sprites or tiles you want to delete.  For tile layers, you can hold down the mouse button and drag over an entire area to delete it in one operation.  For sprite layers, you must click once on each sprite you want to delete.

If you want to delete *all* the objects in a layer, you can double-click the eraser tool icon (you are promted before doing it).

=section #.#.#.#. Eyedropper Tool

[/effect/images/icons/eyedropper.png] The Eyedropper Tool allows you to "copy" sprites and tiles into the [Pencil Tool], for placing copies into the level.  For example, if you see a sprite you want to make a copy of, click the Eyedropper Tool, click on the sprite, then click where you want to place the copy.

This tool also works for [Tile Data Layers].  Using the tool you can click on any tile class object, then place copies anywhere in the level.  If you customized any properties for the tile object, those will also be preserved in your placed copies.

=section #.#.#.#. Scroll Tool

[/effect/images/icons/hand.png] The Scroll Tool allows you to scroll the screen around in any direction.  Click and hold the mouse button in the main view, and move around to scroll.  To quickly select this tool at any time, hold the spacebar, then click and drag.  When you release the spacebar, your previous tool will be restored (see [Keyboard Shortcuts] for details).

=section #.#.#. Palettes

The following sections describe the different palettes available in the Level Map Editor.

=section #.#.#.#. Navigator Palette

[/effect/images/docs/level_editor/map_nav.png] The navigator palette shows you a live thumbnail preview of the entire level.  The preview is updated in real time as you make changes to the level, and also takes into account which layers are visible (see the [Layers Palette]).

Sprites are outlined in white + black here so they show up regardless of the level background you have.  The dotted line represents the main view, and you can drag this around to scroll the screen quickly to anywhere in the level.

=section #.#.#.#. Layers Palette

[/effect/images/docs/level_editor/map_layers_palette.png] The layers palette allows to control which layer is active for drawing, deleting and selecting objects.  Click on the desired layer to make it active (selected).  You can also click on the "eye" icon to the left of each layer to toggle its visibility.  The small numbers on the right of each layer are the z-index values, and are also hot-keys for selecting the layer.

Note that you must define all the layers for a level in the [Info Editor].  You cannot (yet) add new layers on-the-fly, or delete layers from the map editor.

=section #.#.#.#. Tileset Palette

[/effect/images/docs/level_editor/map_tileset_palette.png] The Tileset Palette allows you to select which visual tile to draw with.  This palette is only shown when you have a visual tile layer selected.  When you define a tile layer back in the [Info Editor] you assign a Tileset to that layer.  Click on any tile to select it, or you can use the arrow keys.  The "Sm", "Med" and "XL" links control the size of the tile thumbnail previews.

=section #.#.#.#. Sprite Class Palette

[/effect/images/docs/level_editor/map_sprite_palette.png] The Sprite Class Palette allows you to select which sprite to draw with (using the [Pencil Tool]).  This palette is only shown when you have a sprite layer selected.  The sprites listed in this palette are classes you pre-defined, and marked as "Place in Level Editor".  If you select a sprite that has properties defined, they will be shown below in the [Inspector Palette].

=section #.#.#.#. Tile Class Palette

[/effect/images/docs/level_editor/map_tile_class_palette.png] The Tile Class Palette allows you to select which tile class to draw with (using the [Pencil Tool] or the [Paint Bucket Tool]).  Tile Classes are behavioral classes that you can "attach" to visual tiles using a Tile Data Layer (see [Tile Data Layers] below).  The Tile Class Palette is only shown when you have a Tile Data Layer selected.  If you select a tile class that has properties defined, they will be shown below in the [Inspector Palette].

=section #.#.#.#. Inspector Palette

[/effect/images/docs/level_editor/map_inspector_palette.png] The Inspector Palette is where you can inspect the current selection, and optionally make changes.  If you are using the [Pencil Tool] and have a sprite or tile class selected which has properties defined, the Inspector Palette will allow you to set those properties for new objects placed into the level (shown at left).  The inspector has two other uses, which are desribed in the next two sections:

=section #.#.#.#.#. Selected Sprite Options

[/effect/images/docs/level_editor/map_inspector_edit.png] If you have a pre-existing sprite or tile selected that you clicked on using the [Select Tool], you can use the Inspector Palette to make changes to that object.  For example, you can adjust the ID or sprites, its exact X and Y position, and z-index (shown at left).  If the sprite or tile class also has proerties defined, you can edit those for the object instance as well.

=section #.#.#.#.#. Selected Tool Options

[/effect/images/docs/level_editor/map_pencil_draw_mode.png] Lastly, the Inspector Palette may show options for the current tool in certain cases.  For example, if you have the [Pencil Tool] or [Eraser Tool] selected on a visual tile layer, you can choose whether to overlay tiles on top of each other (see [Overlay Tile Drawing]), or completely replace tiles (overdraw).

=section #.#.#. Layers

The Level Map Editor has four different types of layers: [Sprite Layers], [Tile Layers] (visual), [Tile Data Layers] (behavioral), and finally the [Background Layer].  You define all these in the [Info Editor] for each level.  The following sections describe each type:

=section #.#.#.#. Sprite Layers

Sprite Layers can hold any number of sprites, based on sprite classes that you create and flag with "Place Sprite in Level Editor".  Sprite classes are created in the "Objects" tab.  When you create or edit the sprite class, and want to make it available to the map editor, make sure to check this box:

=image /effect/images/docs/level_editor/map_sprite_class_place.png

This makes the sprite available in the [Sprite Class Palette] for placement into your level map.  Of course, you have to provide a little more information about the sprite when you check this box, such as the pixel size and perhaps some property definitions:

=image /effect/images/docs/level_editor/map_sprite_class_edit.png style="border:0"

See the [article:docs/Sprites and Tiles Guide] for details on persistence, and the icon preview.

Once you save your sprite class, go back to the Map Editor, and using the [Pencil Tool], select a sprite from the [Sprite Class Palette] and click anywhere in the main view to place an instance of the sprite.

=image /effect/images/docs/level_editor/map_example_sprite.png
=caption Sample sprite.

Sprites are outlined in white, and contain their class name as a label.  If you selected a preview icon in the sprite class definition, it is also shown here.  In this case the sprite class is named "{Ship}", and it also has a preview icon.

If the sprite class has any properties defined, you can edit the defaults for new sprites in the [Inspector Palette].  Or, if you want to edit properties of an existing sprite instance already in the level map, use the [Select Tool], click on the sprite, then edit the values in the [Inspector Palette].  You can also set the exact X an Y coordinates of existing sprites.

Each new sprite is assigned a unique alphanumeric ID, which you can customize if you want.  You can use this ID to locate the sprite in the level once it is loaded.  See the [article:docs/Sprite and Tiles Guide] for details on locating sprites in your game code.

There is no limit the number of sprites you can place into your level, but for performance reasons, you should try to keep the total amount of onscreen sprites less than 100 at all times.  Remember that you may create on-demend sprites for effects like explosions, debris, sparkes, and environmental effects, which add to the overall count.

=section #.#.#.#. Tile Layers

Tile Layers hold a two-dimensional "grid" of equal-sized tile graphics.  This is a classic way to create level graphics, used heavily back in the 8-bit game era.  Tiles are simply images (JPEGs, GIFs or PNGs) that you must upload and assign to a "Tileset".  Tiles can by any size, and do not need to be square (however, all the tiles in a Tileset must be the same size).

When you are creating your level in the [Info Editor], you can select a Tileset to assign to each of your tile layers.  Then, back in the [Map Editor], simply select a tile layer in the [Layers Palette], select the [Pencil Tool], choose one of your tiles from the [Tileset Palette], and begin drawing your level graphics.

=image /effect/images/docs/level_editor/map_example_tiles.png style="border:0"
=caption Sample tiles placed into tile layer.

You can also use the [Paint Bucket Tool] to fill entire areas with the same tile, and use the [Eyedropper Tool] to select a tile from an existing tile already in the level.

=section #.#.#.#.#. Overlay Tile Drawing

[/effect/images/docs/level_editor/map_pencil_draw_mode.png] By default, drawing on top of existing tiles replaces the tile with the new selection.  This is known as the "*Replace*" Pencil Draw Mode.  However, you can also set the Pencil Draw Mode to "*Overlay*" by clicking it in the [Inspector Palette], which will overlay new tiles on top of existing ones. 

Overlaying tiles creates new "virtual tiles" which are automatically managed by the engine.  The tile images are composited on the server and returned to the browser as a single image, so this will not hinder engine performance.  You can overlay any number of unique tiles on top of each other.

To illustrate this feature, imagine the following set of tiles:

<center><table cellspacing="5" cellpadding="0"><tr><td class="checkers"><img src="/effect/images/docs/sprites_tiles/hedge_C.png" width="64" height="64" style="border:1px solid #ccc;"/></td><td class="checkers"><img src="/effect/images/docs/sprites_tiles/hedge_L.png" width="64" height="64" style="border:1px solid #ccc;"/></td><td class="checkers"><img src="/effect/images/docs/sprites_tiles/hedge_R.png" width="64" height="64" style="border:1px solid #ccc;"/></td><td class="checkers"><img src="/effect/images/docs/sprites_tiles/hedge_T.png" width="64" height="64" style="border:1px solid #ccc;"/></td><td class="checkers"><img src="/effect/images/docs/sprites_tiles/hedge_B.png" width="64" height="64" style="border:1px solid #ccc;"/></td><td class="checkers"><img src="/effect/images/docs/sprites_tiles/hedge_DTL.png" width="64" height="64" style="border:1px solid #ccc;"/></td><td class="checkers"><img src="/effect/images/docs/sprites_tiles/hedge_DTR.png" width="64" height="64" style="border:1px solid #ccc;"/></td><td class="checkers"><img src="/effect/images/docs/sprites_tiles/hedge_DBL.png" width="64" height="64" style="border:1px solid #ccc;"/></td><td class="checkers"><img src="/effect/images/docs/sprites_tiles/hedge_DBR.png" width="64" height="64" style="border:1px solid #ccc;"/></td></tr><tr><td class="checkers"><img src="/effect/images/docs/sprites_tiles/rocks_C.png" width="64" height="64" style="border:1px solid #ccc;"/></td><td class="checkers"><img src="/effect/images/docs/sprites_tiles/rocks_L.png" width="64" height="64" style="border:1px solid #ccc;"/></td><td class="checkers"><img src="/effect/images/docs/sprites_tiles/rocks_R.png" width="64" height="64" style="border:1px solid #ccc;"/></td><td class="checkers"><img src="/effect/images/docs/sprites_tiles/rocks_T.png" width="64" height="64" style="border:1px solid #ccc;"/></td><td class="checkers"><img src="/effect/images/docs/sprites_tiles/rocks_B.png" width="64" height="64" style="border:1px solid #ccc;"/></td><td class="checkers"><img src="/effect/images/docs/sprites_tiles/rocks_DTL.png" width="64" height="64" style="border:1px solid #ccc;"/></td><td class="checkers"><img src="/effect/images/docs/sprites_tiles/rocks_DTR.png" width="64" height="64" style="border:1px solid #ccc;"/></td><td class="checkers"><img src="/effect/images/docs/sprites_tiles/rocks_DBL.png" width="64" height="64" style="border:1px solid #ccc;"/></td><td class="checkers"><img src="/effect/images/docs/sprites_tiles/rocks_DBR.png" width="64" height="64" style="border:1px solid #ccc;"/></td></tr></table></center>

Now, simply placing these tiles into a level, the hedge and rockface textures couldn't "overlap" with each other.  Of course, you could manually create some custom tiles to create transitions between the two.  But to make things easier, you can just use the "Overlay" draw mode:

=image /effect/images/docs/level_editor/map_example_tile_overlay.png
=caption Example of overlaying tiles.

As you can see in the above example, we have some of the rock tiles sitting right on top of some of the hedge tiles, without having to create a new layer.  This is done by first drawing in the hedge tiles, then selecting "Overlay" draw mode, then drawing the rock tiles right on top of the hedge tiles.  This creates several virtual multi-tiles which you do not have to worry about -- they are automatically created and destroyed as needed by the engine, and they are not shown in the Tileset palette.

The [Eraser Tool] also has a similar "Mode" selector, so you can choose to erase only the top-most tile in a multi-tile stack, or erase all the tiles (the default mode).

=section #.#.#.#. Tile Data Layers

[/effect/images/docs/level_editor/map_add_tile_data_layer.png] Each tile layer may have an optional "Data Layer" associated with it.  The data layer contains behavioral classes for selected tiles.  So for example, you can designate which tiles are "solid" for standing on, or which tiles cause your player to lose a life (spikes, fire, etc.).  To create a data layer, click on the "*Add Data Layer*" link just under the tile layer in the [Layers Palette].

You create "Tile Classes" (behaviors) in the "Objects" tab, and those all show up as objects you can assign to tiles in the data layer.  A Tile Class may have an optional icon preview, any number of properties, sprite dependencies and resources (see the [article:docs/Sprites and Tile Guide] for details).  The actual behavior of the tile is defined in your code.

[/effect/images/docs/level_editor/map_tile_class_palette.png] When you select the data layer for a tile layer, the "Tile Classes" palette will show up, allowing you to select any class for drawing.  Then, you can use the same tools ([Pencil Tool], [Paint Bucket Tool], [Eyedropper Tool] and [Eraser Tool]) to draw in tile data objects on top of your visual tiles.

<div class="clear">Here is an example showing some Tile Classes applied to some visual tiles in a level:</div>

=image /effect/images/docs/level_editor/map_example_tile_objs.png style="border:0"
=caption Tile Classes applied to tiles.

As you can see in the above example, a Tile Class named "{Ground}" was applied to the marble tiles, and a Tile Class named "{Item}" was applied to the frozen tiles.  It is entirely up to your code what these classes mean.  You can flag them as "solid" for collision detection, perform actions when they appear onscreen, perform actions when your player (or other sprites) hit them, and more.

When your level is saved, all the tile data is stored along with the visual tile data.  Then, when your level is loaded in your game, you have complete access to the data layer for things like locating tiles by position, collision detection, pathfinding, artifical intelligence, etc.

Note that these tile classes are not visible when you play the actual game -- they are only shown in the Level Editor for you to design the level.  In fact, you can hide them if you want, by clicking the "eye" icon next to the data layer in the [Layers Palette].  See the [article:docs/Sprites and Tile Guide] for details on this.

=section #.#.#.#. Background Layer

The Background Layer is a simple flat color or image layer that lives behind all your standard sprite and tile layers.  You can control the background color, background image, and scrolling behavior in the [Info Editor].  Note that you can change the background at any time in code, including changing the image to another.

=section #.#.#. Keyboard Shortcuts

Here are all the keyboard shortcuts for the [Map Editor]:

=deflist
	Ctrl-S or Cmd-S | Save Changes to current map.
	Ctrl-X or Cmd-X | Exit map editor (will prompt for unsaved changes if applicable).
	Ctrl-Z or Cmd-Z | Undo last operation.
	Ctrl-R or Cmd-R | Redo last operation.
	V | Selects the [Select Tool].
	B | Selects the [Pencil Tool].
	G | Selects the [Paint Bucket Tool].
	E | Selects the [Eraser Tool].
	I | Selects the [Eyedropper Tool].
	H | Selects the [Scroll Tool].
	Tab Key | If a sprite is selected, locates the next sprite of the same type (sorted by ID), scrolls to and selects it.
	Space Bar | Switches to [Scroll Tool] while key is held down.  Upon release, previous tool selection is restored.
	Number Keys | Selects layer by its z-index value.
	Arrow Keys | Behavior varies based on tool and selection (see below).

For the arrow keys, the following actions will occur:

=list
	If you are using the [Select Tool] and have a sprite currently selected, then the arrow keys will "nudge" the sprite around in 1 pixel increments.
	If you are using the [Pencil Tool] or [Paint Bucket Tool], the arrow keys will control your selection in the [Tileset Palette], [Tile Class Palette] or [Sprite Class Palette].
	If you are using the [Eraser Tool], [Eyedropper Tool], [Scroll Tool], or the [Select Tool] without a selection, then the arrow keys will scroll the main view around in 32 pixel increments.
	If any text field has focus, the arrow keys control your text selection (standard browser behavior).

=section #.#. Loading Levels

You can load a level at any time by calling [api:Effect.Game.loadLevel()].  Pass it the Level ID that you entered when you created the level (case is sensitive), and a callback function to be notified when the level is ready:

=syntax js
	Effect.Game.loadLevel( 'MyLevel1', function() {
		// level is now loaded and activated
	} );

This is an asynchronous function which immediately returns control to your code.  However, the main loop is stopped during a load operation, the screen dimmed, and a progress bar is displayed.  You should not do anything until your callback function fires, at which time the main loop is resumed.

If the requested level is already loaded (from a previous call to {loadLevel()}, or by marking it for "Preload"), then your callback function is invoked immediately.

The {loadLevel()} function actually accepts an optional third argument, which is a boolean indicating whether or not to "activate" the level.  This means that the necessary layers (Planes) are created and populated with content from the Map Editor.  This defaults to {true}.

Level activation involves creating the layers that you defined in the level editor.  If you have already manually created layers in code, these will have to coexist, so it is important you understand what is going on under the hood.  If you have layers with the same IDs already created, they will be repurposed for the level graphics.  Otherwise, new layers will be created.  You can always get access to any of your layers, including those auto-created from loading levels, using [api:Effect.Port.getPlane()].

=section #. Environments

Environments are sets of custom image filters that you can design, and then "attach" to levels.  The level graphics are then automatically transformed using your filters when they are loaded.  This is performed "non-destructively" and in real-time, so you can change filters on-the-fly.  This allows you to create atmospheric effects such as a night time level, sepia tone level, grayscale level, monochrome level, color tinted level, oil painted level, and more.  Example:

<center><table><tr><td><img src="/effect/images/docs/level_editor/env_sample_none.jpg" style="border:1px solid #ccc;"/><br/><div class="dx_caption">Sample level.</div></td><td><div style="width:20px; height:1px;"></div></td><td><img src="/effect/images/docs/level_editor/env_sample_night.jpg" style="border:1px solid #ccc;"/><br/><div class="dx_caption">Level with "night time" environment.</div></td></tr></table></center>

This "night time" effect is achieved by adding two [Gamma] filters to the environment.  One that reduces the "Red" channel, and another that reduces the "Green" channel.  This effectively just leaves blue, causing an effect that looks like night.  There are several other filters you can apply to your environment.  See below.

The following sections explain how to create environments, add filters, and how to attach them to levels.

=section #.#. Creating Environments

To create an environment, click on the "Levels" tab and then the "Create New Environment" link:

=image /effect/images/docs/level_editor/env_list.png
=caption Environment List in "Levels" tab.

This section also lists all the current environments created for your game, with summaries of the filters they apply, and links to edit or delete them.  Creating or editing an environment brings you to the same page, the [Environment Editor]:

=section #.#. Environment Editor

The Environment Editor is where you can create or edit environments.  An Environment consists of an ID (which can contain alphanumeric characters, dash, underscore and period), and a list of filters to apply:

=image /effect/images/docs/level_editor/env_edit.png
=caption Environment Editor.

You can add as many filters as you like to each environment.  Select the desired filter from the menu, and click "Add Selected Filter" to add it.  You can change the order which the filters are applied by clicking the "Up" and "Down" links, and reset the controls back to the defaults by clicking the "Reset" link.  Each filter has a custom set of controls which are described below.

=section #.#.#. Filters

Here are the available filters you can add to your environments:

=section #.#.#.#. Blur

=image /effect/images/docs/level_editor/env_filter_blur.png style="border:0"

The *Blur* filter blurs images, with an adjustable radius between 1.0 and 10.0 pixels.  You can also choose to blur the alpha (transparency) channel of images, as well as the standard color channels (this only applies to PNG images).  Example:

=image /effect/images/docs/level_editor/env_sample_blur.jpg
=caption Example of *Blur* filter.

=section #.#.#.#. Color Fade

=image /effect/images/docs/level_editor/env_filter_color_fade.png style="border:0"

The *Color Fade* filter fades all images toward a solid color, with an adjustable amount between 0 and 100.  You can also select the color of course.  Example:

=image /effect/images/docs/level_editor/env_sample_color_fade.jpg
=caption Example of *Color Fade* filter.

=section #.#.#.#. Contrast

=image /effect/images/docs/level_editor/env_filter_contrast.png style="border:0"

The *Contrast* filter allows you to decrease or increase the contrast of images.  You can also choose to apply the filter to a single color channel (Red, Green or Blue) insted of all channels.  Example:

=image /effect/images/docs/level_editor/env_sample_contrast.jpg
=caption Example of *Contrast* filter.

=section #.#.#.#. Engrave

=image /effect/images/docs/level_editor/env_filter_engrave.png style="border:0"

The *Engrave* filter creates a raised 3D look to images by creating false highlights and shadows, rendered on a gray backdrop.  You can adjust the simulated "brightness" of the effect.  Example:

=image /effect/images/docs/level_editor/env_sample_engrave.jpg
=caption Example of *Engrave* filter.

=section #.#.#.#. Find Edges

=image /effect/images/docs/level_editor/env_filter_find_edges.png style="border:0"

The *Find Edges* filter uses an algorithm to locate the "edges" between areas in your images, and highlights them, while darkening everything else.  You can adjust the radius of the edges, between 1 and 8 pixels.  Example:

=image /effect/images/docs/level_editor/env_sample_find_edges.jpg
=caption Example of *Find Edges* filter.

=section #.#.#.#. Gamma

=image /effect/images/docs/level_editor/env_filter_gamma.png style="border:0"

The *Gamma* filter allows you to adjust the image gamma, between 0.0 and 5.0.  You can also choose to apply the adjustment to a single color channel (Red, Green or Blue) instead of all channels.  Example:

=image /effect/images/docs/level_editor/env_sample_gamma.jpg
=caption Example of *Gamma* filter.

=section #.#.#.#. Invert

=image /effect/images/docs/level_editor/env_filter_invert.png style="border:0"

The *Invert* filter inverts all images (dark to light, light to dark), creating a "negative exposure" effect.  You can choose to apply the filter to a single color (Red, Green or Blue) instead of all channels.  Example:

=image /effect/images/docs/level_editor/env_sample_invert.jpg
=caption Example of *Invert* filter.

=section #.#.#.#. Levels

=image /effect/images/docs/level_editor/env_filter_levels.png style="border:0"

The *Levels* filter allows you to adjust the *Hue*, *Saturation* and *Brightness* of your images.  The Hue controls the color balance of the image, the Saturation controls the amount of color (slide all the way to the left for a "grayscale" effect0, and the Brightness control the image brightness.  Example:

=image /effect/images/docs/level_editor/env_sample_levels.jpg
=caption Example of *Levels* filter.

=section #.#.#.#. Monochrome

=image /effect/images/docs/level_editor/env_filter_monochrome.png style="border:0"

The *Monochrome* filter converts all images to black & white only, using no colors or shades of gray.  You can choose between several dithering methods (Threshold, Gray or Pattern), and enable the filter on alpha (transparency) channels as well as visible color channels.  Example:

=image /effect/images/docs/level_editor/env_sample_monochrome.jpg
=caption Example of *Monochrome* filter.

=section #.#.#.#. Mosaic

=image /effect/images/docs/level_editor/env_filter_mosaic.png style="border:0"

The *Mosaic* filter essentially reduces the image resolution of your images, creating a "pixelated" effect.  You can adjust the size, between 2 and 20 pixels.  Example:

=image /effect/images/docs/level_editor/env_sample_mosaic.jpg
=caption Example of *Mosaic* filter.

=section #.#.#.#. Noise

=image /effect/images/docs/level_editor/env_filter_noise.png style="border:0"

The *Noise* filter applies noise to your images.  You can select from a number of noise algorithms (Laplacian, Gaussian, or Multiplicative), each of which has a different style of noise.  Example:

=image /effect/images/docs/level_editor/env_sample_noise.jpg
=caption Example of *Noise* filter.

=section #.#.#.#. Oil Paint

=image /effect/images/docs/level_editor/env_filter_oil_paint.png style="border:0"

The *Oil Paint* filter simulates an oil painting, making it look as if your images were painted on a canvas.  You can adjust the size of the "brush", between 1 and 10 pixels.  Example:

=image /effect/images/docs/level_editor/env_sample_oil_paint.jpg
=caption Example of *Oil Paint* filter.

=section #.#.#.#. Palette

=image /effect/images/docs/level_editor/env_filter_palette.png style="border:0"

The *Palette* filter allows you to "remap" your image colors to a custom palette.  To effectively use this filter, all your images should be 8-bit and contain palettes (i.e. GIF images or 8-bit indexed PNG images).  You can choose an image asset for the filter, and the palette from the selected image is "applied" to all your other images.

[/effect/images/docs/level_editor/purple-grad.gif] You can choose whether to "adaptively" apply the palette (i.e. automatically choose the closest possible color, with dithering), or "directly" map the colors over.  For the latter, the palettes have to be compatible (same size).  For example, if you chose an image like the purple gradient  to the left with "Adaptive" mode, you would see the following effect when applied to a level:

=image /effect/images/docs/level_editor/env_sample_palette.jpg
=caption Example of *Palette* filter.

=section #.#.#.#. Posterize

=image /effect/images/docs/level_editor/env_filter_posterize.png style="border:0"

The *Posterize* filter reduces the levels of image contrast to a fixed amount, simulating an effect often seen on posters.  You can adjust the amount of levels, from 2 to 10.  Example:

=image /effect/images/docs/level_editor/env_sample_posterize.jpg
=caption Example of *Posterize* filter.

=section #.#.#.#. Tint

=image /effect/images/docs/level_editor/env_filter_tint.png style="border:0"

The *Tint* filter tints the images with a selected color, and a configurable amount.  Using this filter you can apply a "sepia tone" effect by choosing a yellow / gold color.  Example:

=image /effect/images/docs/level_editor/env_sample_tint.jpg
=caption Example of *Tint* filter.

=section #.#.#. Exclusions

You can optionally designate certain images that should be |excluded| from the effects of the environment.  For example, you might want to exclude explosions, sparkles, other atmosphereic effects, custom font images, etc.  Simply click the "Add Exclusion..." button at the bottom of the page, and select an image asset.  You can add as many as you want.

=image /effect/images/docs/level_editor/env_exclusions.png style="border:0"

=section #.#. Environments for Levels

To attach an environment to a level, you simply have to select it in the [Info Editor], when creating or editing your level information.  There is a drop-down menu listing all your environments, located just below the "Preload" checkbox.  Example:

=image /effect/images/docs/level_editor/info_env.png

Simply select your desired environment, and save the level information.  The selected environment is then automatcally applied to your images when the level loads, and the effect is shown in the [Map Editor] as well.

=section #.#.#. Overriding the Environment

You can override the environment just before you load a level, allowing you to customize which environment loads.  For example, this could be used to simulates "times of day" in your level, by creating various environments that simulate morning, noon, afternoon, night, etc.  To do this, call the [api:Effect.Game.setLevelEnvironment()] method just before loading the level, and specify which environment you want.  Example:

=syntax js
	Effect.Game.setLevelEnvironment( 'MyLevel1', 'NightTime' );
	
	Effect.Game.loadLevel( 'MyLevel1', function() {
		// level is now loaded, and with a custom environment!
	} );

This would override the environment in the "{MyLevel1}" level, and set it to the environment with ID "{NightTime}".  This action does not make any permanent changes to your levels, it just temporarily overrides the environment for the current game session.

=section #.#. Environments for Images

Environments were originally designed to be applied to levels as a whole.  However, you can also apply environments to individual images.  To do this, you must list the image as a "Resource" for a sprite.  Then, you can choose an environment just like you choose an image transform.  Example:

=image /effect/images/docs/level_editor/env_sprite_image.png style="border:0"

The "Filter" menu shown above contains a list of your environments, and you can individually assign them to image resources for sprites.  In this way you can re-use the same image multiple images on the same level, with different environments applied to each.

Furthermore, if the level itself also has an environment attached, they are both applied to the image progressively.  The image environment is applied first, followed by the level environment.
