=article_title Keyboard and Mouse Guide
=article_path /docs
=article_tags docs, input, keyboard, mouse
=article_stags sidebar_docs
=article_comments 1
=section_numbers 1
=toc 1

=section #. Keyboard Control

You can easily capture keyboard events in your games, and trigger events in your code.  Also, you can define specific keyboard "controls" in the web interface (such as "Move Left", "Move Right", "Jump", "Shoot", etc.) which are assigned to one or more keys.  This way the player can customize the actual keys on the keyboard that trigger the events, but you always receive the same event ID.

=section #.#. Defining Controls

To define keyboard controls, click on the "Keyboard" tab.  New games come with a number of common controls and key assignments which you can fully customize, or just remove them all and start from scratch.

=image /effect/images/docs/keymouse/keyboard_tab.png style="border:0"

Click on any key control to edit it, or click "Add Key Defintion" to add a new one.  Both take you to the key defintion editor:

=image /effect/images/docs/keymouse/edit_keydef.png style="border:0"

Key controls have both a "Title" and a "ID".  The Title is the visible name of the control, which players can see when they customize keys in the game (see next section).  The ID is the internal identification used by your code to tell events apart.  No matter which keys are pressed to trigger a control, you always receive the same ID in your code.

You can assign multiple keyboard keys to the same control.  For example, you may want to allow the arrow keys, or A/D/W/S to control your player sprite.  Just click the "Set Keys..." button, and hit any keys you want to assign.  Click on keys to remove them.

=section #.#. Assigning Keys While Playing

When users are playing your game, they can customize the key assignments at any time by clicking on the "game controller" icon in the toolbar:

=image /effect/images/docs/keymouse/in_game_edit.png style="border:0"

Their custom key assignments are saved in a cookie, and are automatically reloaded if the user leaves and returns to the game.

=section #.#. isKeyDown

The quickest and easiest way to tell if a key is down (pressed) is to call the [api:Game.isKeyDown()] method.  Pass this an event ID that you defined, and the function returns {true} if the key is currently down, {false} if not.  Here is an example:

=syntax js
	MyPlayerSprite.add({
		logic: function(clock) {
			// change xd and yd depending on keyboard keys down
			if (Effect.Game.isKeyDown('right')) this.x++;
			else if (Effect.Game.isKeyDown('left')) this.x--;
		}
	});

In this example we are using [api:Game.isKeyDown()] to move our player sprite left and right, depending on whether the "left" or "right" keys are down.  Notice that we aren't checking for actual keys like "left arrow key" or "A".  We just check for "left" or "right", which are pre-defined key control IDs, that could map to any number of different keys on the keyboard.

This method is usually just fine for things like player movement, because the keys are typically |held down| for a certain amount of time.  However, for actions like jumping or shooting, you want to catch the |instant| the key is pressed (otherwise you may "miss" the event if the player is too quick).  For this, you need to define an event listener.  See the next section for details.

=section #.#. onKeyDown and onKeyUp

To register event listeners for catching the very instant users press and release keys, you can use the [api:Effect.Game.onKeyDown] and [api:Effect.Game.onKeyUp] events, respectively.  For example:

=syntax js
	Effect.Game.addEventListener( 'onKeyDown', function(id) {
		switch (id) {
			case 'jump':
				// user pressed the jump key!
				break;
			
			case 'shoot':
				// user pressed the shoot key!
				break;
		}
	} );
	
	Effect.Game.addEventListener( 'onKeyDown', function(id) {
		switch (id) {
			case 'jump':
				// user released the jump key!
				break;
			
			case 'shoot':
				// user released the shoot key!
				break;
		}
	} );

One thing to note here, is that events may arrive |between| logic or draw frames, so to keep things sane, it is recommended you don't immediately call functions in your sprite to initiate a jump or a shoot.  Instead, just set a property on your sprite that you can later pick up in the next logic loop.  Trust me, this'll save you headaches later on.  Example:

=syntax js
	var player = Effect.Port.getPlane('sprites').getSprite('player');
	
	Effect.Game.addEventListener( 'onKeyDown', function(id) {
		switch (id) {
			case 'jump':
				// user is requesting a jump
				player.jump = true;
				break;
		
			case 'shoot':
				// user is requesting a shoot
				player.shoot = true;
				break;
		}
	} );

Then, in your sprite's {logic()} method, you can check the {jump} and {shoot} properties, and execute the proper action at the proper time.  Example:

=syntax js
	MyPlayerSprite.add({
		logic: function(clock) {
			if (this.jump) {
				// initiate jump action, and clear flag
				this.doJump();
				this.jump = false;
			}
			else if (this.shoot) {
				// initiate shoot action, and clear flag
				this.doShoot();
				this.shoot = false;
			}
		}
	});

You can actually combine both techniques here, and use [api:Effect.Game.isKeyDown()] to see if the player is still holding the jump key down, and extend the jump height.  So if the player lightly "taps" the button, it will result in a shorter jump.  But if the key is held down, you can sustain the jump for a longer period of time.

=section #.#.#. Raw Key Code

The [api:Effect.Game.onKeyDown] and [api:Effect.Game.onKeyUp] handlers are also passed the raw key code as the second argument, in case you need it.  This value represents the actual key on the keyboard, not necessarily tied to any particular game control.  Example:

=syntax js
	Effect.Game.addEventListener( 'onKeyDown', function(id, code) {
		switch (code) {
			case '65':
				// pressed the "A" key!
				break;
			
			case '66':
				// pressed the "B" key!
				break;
		}
	} );

Note that although this appears to be the ASCII value for the key pressed, that does not always hold true.  Here is a [http://www.cambiaresearch.com/c4/702b8cd1-e5b0-42e6-83ac-25f0306e3e25/Javascript-Char-Codes-Key-Codes.aspx list of all key codes].  Please note that certain browsers / platforms may vary their key codes for "special" keys.  However, the basic alphanumeric keys are always consistent.

=section #.#. setKeyHandler

To make things easier to get key events into your sprite, you can actually designate the sprite object itself as the listener object to receive specific key events.  Meaning, instead of defining "global" key handlers as in the examples above, you simply tell the engine which key controls your sprite is interested in, then you can just define {onKeyDown()} and/or {onKeyUp()} methods in your sprite class.  This is done by calling [api:Effect.Game.setKeyHandler()] for each control.  Example:

=syntax js
	MyPlayerSprite.add({
		setup: function() {
			// we want to be notified for 'jump' and 'shoot' keys
			Effect.Game.setKeyHandler( 'jump', this );
			Effect.Game.setKeyHandler( 'shoot', this );
		},
		
		onKeyDown: function(id) {
			// this is called for jump and shoot key presses.
			// set a property named the same as the key definition ID
			this[id] = true;
		},
		
		logic: function(clock) {
			if (this.jump) {
				this.doJump();
				this.jump = false;
			}
			else if (this.shoot) {
				this.doShoot();
				this.shoot = false;
			}
		}
	} );

Please note that [api:Effect.Game.setKeyHandler()] cannot be called until the game is loaded.

=section #.#. setResumeKey

If you define a key control for pausing the game (new games come with a "start" key definition for this purpose), you probably want the same key to also |resume| the game if paused.  Well the problem is, when the game is paused the engine "unhooks" the keyboard and mouse, freeing them up for standard browser actions.  However, there is one allowed exception.  If you call [api:Effect.Game.setResumeKey()], that is, assign one of your key controls for resuming the game, the engine will take care of it for you.  Example:

=syntax js
	Effect.Game.setResumeKey( 'start' );
	
	Effect.Game.addEventListener( 'onKeyDown', function(id) {
		switch (id) {
			case 'start': Effect.Game.pause(); break;
		}
	} );

So here we have a standard [api:Effect.Game.onKeyDown] event handler, which catches the "start" key event and pauses the game.  But we're also assigning that same key control as the "resume key", so pressing it while paused will resume the game.

=section #.#. setKeysActive

There may be certain times in your game when you want to "disable" all key input.  For example, during a special animation, cut scene or transition.  While it is recommended you handle this by just specifically ignoring key presses in your code, you could just call [api:Effect.Game.setKeysActive()] and pass {false}.  Example:

=syntax js
	Effect.Game.setKeysActive(false); // disable all key input
	Effect.Game.setKeysActive(true); // enable all key input

Note that the engine uses this function internally to disable keyboard input while the game (and levels) are loading.

=section #. Mouse Control

You can capture any and all mouse activity in your game, include moving the mouse over the game display area, clicking the left, middle or right buttons, and moving the mouse wheel (if the user has one).  You can listen for any of these events in your game and execute any actions you like.

=section #.#. Mouse Clicks

To capture all mouse clicks, simply listen for the [api:Effect.Port.onMouseDown] and/or [api:Effect.Port.onMouseUp] events.  Note that these are applied to the {Effect.Port} object, not {Effect.Game}.

=syntax js
	Effect.Port.addEventListener( 'onMouseDown', function(pt, buttonIdx) {
		// a mouse button was pressed!
	} );
	
	Effect.Port.addEventListener( 'onMouseUp', function(pt, buttonIdx) {
		// a mouse button was released!
	} );

Your callback function is passed the mouse coordinates (translated into global game world coordinates), and the mouse button index number.  The mouse coordinates are passed as a [api:Point] object, with "{x}" and "{y}" properties.  Note that you do not have to worry about things like the zoom level here -- the coordinates are translated into "game world" coordinates, which are adjusted for zoom, |and| the main port scroll offset.

You can use the following three constants to determine which mouse button was pressed or released (these have been normalized to work across all supported browsers):

=syntax js
	Effect.Port.addEventListener( 'onMouseDown', function(pt, buttonIdx) {
		switch (buttonIdx) {
			case Effect.LEFT_BUTTON:
				// left mouse button was pressed!
				break;
			case Effect.MIDDLE_MIDDLE:
				// middle mouse button was pressed!
				break;
			case Effect.RIGHT_BUTTON:
				// right mouse button was pressed!
				break;
		}
	} );

If you want to determine if the user clicked on a sprite, you can use the [api:SpritePlane.lookupSpriteFromGlobal()] function.  Pass this the mouse coordinates, and it returns a reference to the sprite under the mouse cursor, if any.  If multiple are found, the sprite with the highest {zIndex} is returned.

=syntax js
	Effect.Port.addEventListener( 'onMouseDown', function(pt, buttonIdx) {
		var splane = Effect.Port.getPlane( 'sprites' );
		var sprite = splane.lookupSpriteFromGlobal( pt );
		if (sprite) {
			// sprite was clicked!
		}
	} );

=section #.#. Mouse Movement

To capture all mouse movement, listen for the [api:Effect.Port.onMouseMove] event.  This will be invoked for every single mouse movement, and always deliver up-to-date coordinates (also normalized to global game world coordinates).  This is great for positioning a player sprite based on the mouse.

=syntax js
	var player = Effect.Port.getPlane('sprites').getSprite('player');
	
	Effect.Port.addEventListener( 'onMouseMove', function(pt) {
		// the mouse was moved!  let's move our player sprite to match
		player.x = pt.x;
		player.y = pt.y;
	} );

=section #.#. Mouse Wheel

To capture mouse wheel movement, listen for the [api.Effect.Port.onMouseWheel] event.  It will be passed a number representng the delta (how far the wheel moved, and by how much).  Example:

=syntax js
	Effect.Port.addEventListener( 'onMouseWheel', function(delta) {
		// the mouse wheel was moved by 'delta' amount
	} );

The "{delta}" number will be negative if the mouse wheel scrolled up, or positive if it scrolled down.  However, due to differences in the way browsers handle this, it is recommended you only look at the |polarity| of the delta (i.e. &lt; 0 or &gt; 0), and don't act on the value itself, as the amplitude can vary.

=section #.#. captureMouse

Often times you want all mouse events delegated directly to a sprite instance.  For example, consider a "button" sprite on your title screen.  For this, you can call [api:Sprite.captureMouse()].

This function instructs the engine that you want relevant mouse events delegated to the sprite instance (with the exception of non-clicked mouse move events -- see below).  After calling this method on an instance of your sprite, you simply have to define {onMouseOver}, {onMouseOut}, {onMouseDown}, {onMouseUp}, and/or {onMouseMove} methods in your sprite class.  Example:

=syntax js
	MySprite.add({
		setup: function() {
			// we want mouse events!
			this.captureMouse();
		},
		
		onMouseDown: function(pt, buttonIdx) {
			// mouse button was click on our sprite!
		},
		
		onMouseUp: function(pt, buttonIdx) {
			// mouse button was released, after clicking on our sprite
		}
	});

It is important to note that not |all| mouse events are delegated to the sprite instance.  Only those that affect it directly.  For example, {onMouseOver} and {onMouseOut} work as expected.  {onMouseDown} is only called if the click is on the sprite (and not on any sprites |above| it that also have mouse capture), and {onMouseUp} is only called if the mouseDown originated on the sprite.  Finally, {onMouseMove} is only called |if a mouse button is currently down and the click originated on the sprite|.

Finally, note that the mouse coordinates passed to your sprite {onMouseDown}, {onMouseUp}, and {onMouseMove} handlers are normalized into |offsets| from the sprite's top-left corner.  So if the user clicked right on the top-left corner of the sprite, both the {x} and {y} properties will be "0".  If you want global world coordinates instead, simply add the sprite's {x} and {y} properties to the point.

=section #.#. setMouseActive

There may be certain times in your game when you want to "disable" all mouse input.  For example, during a special animation, cut scene or transition.  While it is recommended you handle this by just specifically ignoring mouse events in your code, you could just call [api:Effect.Game.setMouseActive()] and pass {false}.  Example:

=syntax js
	Effect.Game.setMouseActive(false); // disable all mouse input
	Effect.Game.setMousesActive(true); // enable all mouse input

Note that the engine uses this function internally to disable mouse input while the game (and levels) are loading.

=section #. Examples

Here are some examples of using the keyboard and mouse:

=list
	[/effect/example.psp.html?rev=col_basic Basic Collision Demo] (uses keyboard controls)
	[/effect/example.psp.html?rev=drag_drop Mouse Drag & Drop Demo]
