=article_title Font Guide
=article_path /docs
=article_tags docs, fonts, hud, truetype, opentype
=article_stags sidebar_docs
=article_comments 1
=toc 1

=section #. Overview

The Effect Engine provides an easy way for you to render custom fonts in your games.  You simply provide a source font face (in either [wikipedia:OpenType] or [wikipedia:TrueType] format), and then you can create a "Bitmap Font" from that source font.

Essentially, the system renders a grid of font glyphs on the server, and returns the bitmap images for the game engine to use.  We call these "Bitmap Fonts", and are typically used for things like heads-up displays (HUDs), i.e. displaying the player's score, lives, level, etc.  The fonts are monospace, as they are basically a collection of tiles.  However, you have complete control over the look of the text.  You can even download the "glyph map" bitmap image, stylize it however you like (i.e. make it as colorful as you want, something you can't do with a normal font), then upload it again for use in your game.

=section #.#. Why can't I use built-in browser fonts?

Well for one thing, different browsers and platforms render those fonts differently, making it difficult to provide a consistent experience for your users.  Secondly, there are only a small handful of common fonts that all users share, and they are all quite bland.  Finally, Effect Games may provide other venues to publish your games in the future, such as download to play, or mobile games, and the built-in browser fonts may not be available in those cases.

Since Bitmap fonts convert the glyphs into image bitmaps, they will always be available and look consistent no matter where your game is running.

=section #.#. What about variable width fonts and paragraph text?

It is true that Effect Bitmap fonts are monospace when rendered in your games, and thus have quite a "retro" look.  If you would rather render variable width text, including paragraph text with word wrap, but still use custom font source files, check out the [#Article/plugins/TrueFont TrueFont Plugin].

=section #. Setup

This section describes how to setup a Bitmap font, and include it in your game.

=section #.#. Assets

First thing's first.  You have to provide the source font file.  You can find plenty online, but beware of copyright issues.  Make sure you use a free font, or have permission to use it.  Upload your chosen font as an asset to your game.  If you don't have any fonts or are worried about font copyright issues, consider using one of these free fonts:

=list
	[/effect/fonts/helvetiker.zip Helvetiker]
	[/effect/fonts/optimer.zip Optimer]
	[/effect/fonts/gentilis.zip Gentilis]

Only [wikipedia:OpenType] and [wikipedia:TrueType] formats are supported at this time.

Once you have your source font files, upload them as assets to your game.  For details on this, see the [#Article/docs/Asset_Manager_Guide Asset Manager Guide].

=section #.#. Bitmap Fonts

To define a Bitmap Font using your uploaded source font, navigate to your game's main screen and click on the "Objects" tab.  Bitmap Fonts are listed under the sprites, tiles and tilesets:

=image /effect/images/docs/fonts/bitmap_fonts.png style="border:0"
=caption Screenshot showing "Objects" tab and Bitmap Font list.

If you have any existing fonts, they will be listed here, and can be edited by clicking their names, or the "Edit" link.  Otherwise click the "Add Font" link to create a new bitmap font.  Either way you will be presented with the bitmap font editor:

=image /effect/images/docs/fonts/create_font.png
=caption Screenshot showing Bitmap Font Editor.

Here are descriptions of each of the sections in the editor:

=section #.#.#. Font Name

This is the identification string for your font, which you must use in your code.  Use only alphanumeric characters and dashes here.  You might want to include the point size and color in the name, as each bitmap font object is a single point size and color.  Example: "{helvetiker-24pt-red}".

=section #.#.#. Enabled

This checkbox controls whether the font is enabled or not.  Only enabled fonts are loaded and made available to your game.  All fonts are preloaded at startup, and cannot be loaded on demand in the way other graphics are.

=section #.#.#. Font Source

Use this button to select your source font file (OpenType or TrueType).  It must already be uploaded as a game asset.  This is also how you can choose the font style (regular, bold, italic, etc.) because each individual font source file is typically set to one particular style.  The style is usually part of the font filename.  Example:

=filesystem
	helvetiker.zip/
		helvetiker_bold.ttf
		helvetiker_bold_italic.ttf
		helvetiker_italic.ttf
		helvetiker_regular.ttf

=section #.#.#. Font Size

This is the font point size to use when rendering the font into bitmap glyphs.  Depending on the font, this is usually equal to the pixel height of each glyph, but there are exceptions.  Use this, and the [Glyph Size] controls to fine tune your glphs so they fit properly into the bounding tile boxes.

=section #.#.#. Glyph Size

Use this control to set the exact pixel size of your font glyphs.  This should usually be set to the [Font Size], but you can achieve different effects by changing the values.  Be sure to check the preview before you decide on a size.

=section #.#.#. Text Color

Here you can select a text color for your bitmap font.

=section #.#.#. Quality

Choose whether or not to anti-alias the font, which renders it with "soft edges".  Anti-aliasing generally looks better, but may or may not be desirable depending on the look you want in your game.

=section #.#.#. Download Image

To have true control over the glyph images, you can download the actual glyph map as a PNG image, and edit it in your favorite image editor.  This way you can do things like add drop shadows, glows, gradient overlays, decorative borders, or whatever you want.  You just need to make sure that the overall image stays the same size, and each glyph doesn't bleed over to neighboring glyphs.

Once you edit your glyph map image to your desire, upload it as a game asset.  Then see the [Custom Font Image] section for how to load it in your game.

=section #. Usage

There are two ways to use bitmap fonts in your game, through a [HUD Plane] which is a separate layer dedicated to rendering your font, or a [TextSprite] which is a sprite living in a sprite plane, and can move around and scroll with the level (if desired).  The following subsections for details on each method.

=section #.#. HUD Plane

A HUD Plane is a dedicated layer for rendering your text.  This is useful for "heads up displays" like score, lives, timer, etc.  To setup a HUD Plane, create an instance of the {HUD} class, set the font and position, and attach it to the game port.

This should happen after the game loads, so use an {onLoadGame} event handler.

=syntax js
	Effect.Game.addEventListener( 'onLoadGame', function() {
		var hud = new HUD( 'myhud' );
		
		hud.setFont( 'MyFont1' );
		hud.setTableSize( 10, 1 );
		hud.setTracking( 1.0, 1.0 );
		hud.setPosition( 50, 50 );
		hud.setZIndex( 3 );
		
		Effect.Port.attach( hud );
	} );

So here we are creating a new {HUD} object, and assigning an ID as the argument to the constructor.  This is optional -- a unique ID will be generated if you don't provide one, but doing so allows you to lookup your HUD at a later time, so you don't have to worry about storing the {hud} variable.

Next we are setting the font, by calling the {setFont()} method and passing the ID of our font (the [Font Name] we assigned when we created the font back on the site).  This name must match exactly, and case matters.

After that we set the table size via the {setTableSize()} method.  This sets the total number of characters allowed horizontally and vertically.  Essentially we are setting up a "grid" of tiles, each of which can hold a single font glyph.

Now we set the tracking via the {setTracking()} method.  This is the spacing between letters horiztonally and vertically, where 1.0 means normal, 0.5 means more squeezed together, and 1.5 means more spaced apart.

Finally, we set the z-index (draw order) via the {setZIndex()} method.  Lower numbers are further behind, higher numbers are further front.

After everything is setup, we "attach" the plane to the port just like we would any normal sprite or tile plane.  This activates the plane and registers it or receiving logic and draw events.

So how do you actually render text in the plane?  See [Rendering Text] below.

=section #.#. TextSprite

Text Sprites work similarly to the HUD Plane, but instead of being their own layers, they live inside sprite planes and can move freely and behave like sprites.  Technically, {HUD} is one of the parent classes of {TextSprite}, so setup is very similar.  In fact, unlike normal sprites, you don't have to subclass it -- you can just create direct {TextSprite} objects and begin using them, like so:

=syntax js
	Effect.Game.addEventListener( 'onLoadGame', function() {
		var plane = new SpritePlane( 'sprites' );
		Effect.Port.attach( plane );
		
		var tsprite = new TextSprite( 'mytext' );
		
		tsprite.setFont( 'MyFont1' );
		tsprite.setTableSize( 10, 1 );
		tsprite.setTracking( 1.0, 1.0 );
		tsprite.x = 50;
		tsprite.y = 50;
		
		plane.attach( tsprite );
	} );

So first we are creating a sprite plane and attaching it to the game port.  You could also use a sprite plane created in the level editor here if you wanted -- just load and activate the level, then grab a reference to the plane via {Effect.Port.getPlane()}.

Our {TextSprite} is then created manually by calling {new TextSprite()} and passing it an ID.  This differs from the standard way of creating sprites (i.e. via {createSprite()}) because this is a special type of sprite class that must be configured before it is "attached" to a plane.

Next the sprite is configured by calling {setFont()}, {setTableSize()}, {setTracking()}, {setPosition()} and {setZIndex()}.  See [HUD Plane] above for details on these calls, as they are the same as before.

Finally, the sprite is attached to the |plane| (not the |port|) and it is ready to use.

=section #.#. Rendering Text

So, once your sprite or plane is attached, you can render text at any time (during your logic or draw routines, or in event handlers).  The changes will be reflected in the next iteration through the draw loop.  Use one of the following methods to render text:

=section #.#.#. setChar

Use {setChar()} to set a single character in your grid.  Pass the horizontal and vertical character positions (0,0 is top-left), and the ASCII character to rasterize.  Example:

=syntax js
	tsprite.setChar( 0, 0, "H" );

Note that bitmap fonts currently only support standard 7-bit ASCII characters (ASCII values 32 - 127).

=section #.#.#. setString

Use {setString()} to render an entire string of characters.  Pass the starting horiztontal and vertical character postiions (0,0 is top-left), and the string to rasterize.  Example:

=syntax js
	tsprite.setString( 0, 0, "Hello World!" );

=section #.#.#. setPadInt

Use {setPadInt()} to render an integer padded with zeros.  This is useful for things like score displays.  Pass the starting horizontal and vertical character positions (0,0 is top-left), the integer value to rasterize, and the desired number of digits.  Example:

=syntax js
	tsprite.setPadInt( 0, 0, 333, 5 );

This would display "00333" (padded with 2 zeros to reach the desired 5 character length).

=section #.#. Custom Font Image

If you created a custom font image (by downloading a glyph map and making changes yourself, or generating one from scratch), you can easily use it to render text in your game.  Instead of calling {setFont()} to initialize your {HUD} or {TextSprite}, call {setCustomFont()} and pass the asset path to the glyph map file, and the glyph width / height in pixels.  Example:

=syntax js
	tsprite.setCustomFont( '/fonts/mycustomfont.png', 16, 16 );

The image must be preloaded for this to work.  To preload an image, add it to the "Preload Resources" list on the *Edit Game Settings* screen.

=section #. Examples

=list
	[/effect/example.psp.html?rev=font_hud Example of using a HUD Plane]
	[/effect/example.psp.html?rev=font_sprite Example of using a TextSprite]
	[/effect/example.psp.html?rev=font_custom Example of using a custom font image]

=section #. Further Reading

=list
	See the [#Article/docs/API_Reference_Guide API Reference Guide] for details on all the classes and methods described here.
	See the [#Article/docs/Getting_Started_Guide Getting Started Guide] for basic information about planes, sprites, assets and events.
	See the [#Article/docs/Sprites_and_Tiles_Guide Sprites and Tiles Guide] for details on the {Sprite} base class.
	See the [#Article/plugins/TrueFont TrueFont Plugin] for rendering variable width text strings and paragraph text.
