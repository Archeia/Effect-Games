=article_title Formatting Guide
=article_path /main
=toc 0

=section #.#. Quick Reference

=table
	Feature | Syntax | Example
	Bold | {*text here*} | *text here*
	Italic | {|text here|} | |text here|
	Monospace | {\{text here\}} | {text here}
	Basic HTML | {<font size="+3">BIG</font>} | <font size="+3">BIG</font>
	URL | {http://www.google.com} | http://www.google.com
	Link | {[http://www.google.com Google]} | [http://www.google.com Google]

If you want to use any of the above symbols in your text and have them show up normally (i.e. not activate markup), escape them with a backslash.  Example:

	This is \*not bold\*.

This would show up as: This is \*not bold\*.

=section #.#. Links

Effect allows you to insert links to other sections within the document, or to external web resources.  Links are specified by square brackets (\[...\]).  Here are a few examples:

	A link to the [Introduction] section.
	A link to a website: [http://www.google.com].
	A link with a title: [http://www.google.com Google's Homepage].
	A link to a Wikipedia article [wikipedia:XML].
	A link to a Google search: [google:Microsoft Word].
	A link to a RFC document: [rfc:822].

These would come out like this: 

=box
A link to the [Introduction] section.
A link to a website: [http://www.google.com].
A link with a title: [http://www.google.com Google's Homepage].
A link to a Wikipedia article: [wikipedia:XML].
A link to a Google search: [google:Microsoft Word].
A link to a RFC document: [rfc:822].
=box

=section #.#. Code and Markup

To syntax highlight code or XML snippets in your articles, simply indent the text by one tab.  This can be done by selecting all the text and pressing "tab".  Here is an example of some markup:

=syntax text
	<Element Attribute="Hello">
		This is XML
	</Element>

This would be recognized as markup, and come out looking like:

	<Element Attribute="Hello">
		This is XML
	</Element>

Here is an example of some code:

=syntax text
	var x = 2, y = 3;
	function myadd(a, b) {
		return a + b;
	}

This would be recognized as code, and come out looking like:

	var x = 2, y = 3;
	function myadd(a, b) {
		return a + b;
	}

=section #.#. Tables and Lists

To insert a table, use this syntax:

	=table
		Column Header 1 | Column Header 2 | Column Header 3
		Data | Here | Example
		More | Data | Here

This would come out looking like:

=table
	Column Header 1 | Column Header 2 | Column Header 3
	Data | Here | Example
	More | Data | Here

To insert a list, use this syntax:

	=list
		Item 1
		Item 2
			Item 2a
			Item 2b

This would come out looking like:

=list
	Item 1
	Item 2
		Item 2a
		Item 2b

To insert a definition list, use this syntax:

	=deflist
		Item Name 1 | Description here
		Item Name 2 | Example

This would come out looking like:

=deflist
	Item Name 1 | Description here
	Item Name 2 | Example

=section #.#. Sections

To define sections in your article, use this syntax:

	=section #. Title Level 1
	=section #.#. Title Level 2
	=section #.#.#. Title Level 3
	=section #.#.#.#. Title Level 4
	=section #.#.#.#.#. Title Level 5

This would come out looking like:

=box
<div class="dx_section_header_1">Title Level 1</div>
<div class="dx_section_header_2">Title Level 2</div>
<div class="dx_section_header_3">Title Level 3</div>
<div class="dx_section_header_4">Title Level 4</div>
<div class="dx_section_header_5">Title Level 5</div>
=box

=section #.#. Images

To insert an inline, float-left image, simply put the URL in square brackets:

	[http://www.google.com/intl/en_ALL/images/logo.gif]
	This is a paragraph of text.

This would come out looking like:

=box
[http://www.google.com/intl/en_ALL/images/logo.gif]
This is a paragraph of text.
<div class="clear"></div>
=box

To insert a block, bordered and centered image, use the {=image} and optional {=caption} tags:

	=image http://www.google.com/intl/en_ALL/images/logo.gif
	=caption The Google Logo

This would come out looking like:

=image http://www.google.com/intl/en_ALL/images/logo.gif
=caption The Google Logo

You can also upload custom images using the edit toolbar, and include those in your articles.

=section #.#. Flags

You can define a number of special flags at the top of your article, to configure certain parameters.  Here is a quick list:

=deflist
	{=toc} | Whether or not the table of contents will be shown ({true} or {false}, defaults to {true}).
	{=toc_max} | The maximum number of section indent levels to show in the table of contents (default is {4}).
	{=section_numbers} | Whether or not to show section numbers in section headers ({true} or {false}, defaults to {false}).
	{=email_links} | Whether or not to convert email addresses to clickable links ({true} or {false}, defaults to {true}).
	{=tab_char} | Sets the type of tabs your text editor uses.  See [Tabs].
	{=list_type} | Specifies the type of lists to generate ({bullet} or {number}, defaults to {bullet}).
	{=code} | Specifies the type of code snippets in the document (several formats are accepted, defaults to {javascript}).
	{=markup} | Specifies the type of markup in the document (several formats are accepted, defaults to {xml}).

=section #. Detailed Formatting Guide

=section #.#. Introduction

The *Effect Documentation Markup Language* (EDML) was designed to allow developers to write presentable technical documents using nothing but a text editor.  The file format is plain text with special markup tags, and the output format is [wikipedia:HTML].  This is also used for all Effect website blog articles.  The idea was to make the format extremely easy to type, with minimal effort needed for adding styling, links, sections, table of contents, code snippets, etc.

=section #.#. What does EDML look like?

Here is an example of a snippet of Effect source:

	=section #. Example Section
	Hello, this is some text.  In this paragraph I can
	include *bold text* like this, |italic text| like this, or
	{monospace text} like this.  I can create links to sections
	like this: [Another Example].
	
	=section #.#. Another Example
	This is a new section which has two numbers (1.1). Section
	numbering is automatic.  How about an [external link, 
	http://www.google.com].  There is so much more!

=section #.#. What does EDML output look like?

You're looking at it.  This user's guide was written entirely in EDML.  Oh, and the previous example snippet would come out like this:

=image images/doxter/example1.gif
=caption An example of compiled EDML

=section #.#. Basic Formatting

A Effect source doc is split up into lines, and the engine recognizes three different types of lines:

=deflist

	Normal Lines | A regular paragraph of text
	Indented Lines | An indented block of code, markup, or list items
	Tag Lines | Lines that begin with an equals (=) symbol are special instructions

You can insert any of these three types of lines at any time, and the engine will render it accordingly.  Feel free to add blank lines to separate sections, as they are ignored by the engine.  You can dive right into normal paragraph text, or you can define a section (recommended), then add some text under it.  Example:

	=section #. Introduction
	Here is my text!

Keep in mind that each "line" is in fact a "paragraph", so use line breaks consciously.  For example, the following is rendered as two separate paragraphs (with a vertical space between them):

	Here I am starting a sentence, but I
	hit return, so it's a new paragraph!

Indented lines (i.e. those beginning with a tab) are considered to be code, markup, or plain text.  They will be formatted differently according to what they are recognized to be.  For example, blocks of indented text recognized as code are syntax-highlighted, as is both XML and HTML.  If not recognized, the block is considered to be plain text, and is simply indented in a {monospace font}.  For details and examples, see [Code / Markup Blocks].

=section #.#.#. Rich Text

To add quick styling of paragraph text, simply surround sections with asterisks (\*) for *bold text*, pipes (\|) for |italic text|, or curly braces (\{...\}) for {monospace text}.  Also, you can simply add HTML tags for <span style="background-color:#6ff;">custom formatting</span>.

	Here is some *bold text*, some |italic text|, and some
	{monospace text}.  Oh, and some <font size="+4">BIG TEXT</font>.

To add links to other sections of your document, simply include the name of the section surrounded with \[square brackets\].  Take care in spelling the section title correctly, or else the link will fail (see [Errors] below).  Square brackets can also be used to link to external resources of various types.  See [Links] for more.

=section #.#. Sections

The {=section} tag lines mark the start of a new section, show a large bold title, and add an entry into the table of contents.  The general syntax is:

	=section #. Name Here

The pound (#) symbol indicates the section number, which is automatically set, but you still need to tell the engine how many |levels| the section number should have.  For example, documents typically have "outer sections" which are numbered like "1" or "2", but they also have "inner sections" which are numbered like "1.1", "2.1", or even "1.2.5.33".  Simply tell Effect how "deep" your section is, and all the numbering is totally automatic:

	=section #. Outer Section Here
	=section #.#. Inner Section
	=section #.#.#. Even Deeper
	=section #.#.#.#. Yup, very deep
	=section #.#.#.#.#. Okay, this is getting ridiculous
	=section #. This would be section 2.

You can have sections up to 5 levels deep.

=note If you don't want numbers showing on your section titles, simply include the {=section_numbers} tag in your file header, and set it to {false}.

=section #.#.#. Introductory Sections

Some documents have "introductory sections" that are not numbered, such as a "Preface", "Foreword", or a "Revisions" section.  These are typically located before all other sections, and are prefixed with lower-case roman numerals.  Feel free to add these sections to your document -- just replace the pound (#) symbols with your own numbering characters or letters:

	=section i. Foreward
	Let me tell you all about my document, and myself.
	
	=section ii. Revisions
	Perhaps a table here showing each revision.

Remember, the table of contents is generated and included automatically above all other sections, and will contains links to introductory sections.

=section #.#. Text Styling

There are several ways to add styling to paragraph text.  You can simply surround sections with asterisks (\*) for *bold text*, pipes (\|) for |italic text|, or curly braces (\{, \}) for {monospace text}.  Or, you can just insert HTML tags for your own custom formatting.  Examples:

	Here is some *bold text*, some |italic text|, and some
	{monospace text}.  Oh, and some <font size="+3">BIG TEXT</font>.

This would come out looking like:

=box
Here is some *bold text*, some |italic text|, and some {monospace text}.  Oh, and some <font size="+3">BIG TEXT</font>.
=box

Curly braces also allow you to include XML/HTML markup and other symbols, and they are escaped so they are visible in the raw HTML.  Example:

	Here HTML markup is <b>interpreted</b>, but if I
	put it in {<b>curly braces</b>} it will show through.

This would come out looking like this:
=box
Here HTML markup is <b>interpreted</b>, but if I put it in {<b>curly braces</b>} it will show through.
=box

There may be times where you want to actually show symbols like asterisks, pipes or curly braces, and not have them interpreted as styling tags.  To do this, simply escape them with backslashes, and they will pass through to the HTML presentation.  Example:

	Here are some escaped \*asterisks\*, \|pipes\| and \{curly braces\}.

That line would come out looking like this (notice the lack of styling):

=box
Here are some escaped \*asterisks\*, \|pipes\| and \{curly braces\}.
=box

=section #.#. Links

Here are some details about each link type:

=table
=header Link Type | Syntax | Description
=row Section Link | {[Introduction]} | Generate a link to a section within the document.  Please take care to spell the section title correctly, or else the link will not work (in this case a warning will be thrown -- see [Errors] for details).
=row Web Link | {[http://www.google.com]} | Generate a web link to a page or resource on the internet.  This should be a fully-qualified URL, and can point at a page or file, and be any protocol (HTTP, FTP, etc.).  These will be shown in italic, and open in a new browser window.
=row Custom Link | {[http://www.google.com Google's Homepage]} | A web link, but only the custom text is shown -- the URL itself is hidden.  These will be shown in italic, and open in a new browser window.
=row Wikipedia Link | {[wikipedia:XML]} | This is an easy way to link to a [http://www.wikipedia.org Wikipedia] article just by specifying the article's name.  Make sure you check if the article exists first.  These will be shown in italic, and open in a new browser window.
=row Google Search | {[google:Microsoft Word]} | This will generate a link to a Google search using the query you specify.  These will be shown in italic, and open in a new browser window.
=row RFC Document | {[rfc:822]} | This will generate a link to an RFC on [http://www.faqs.org].  These will be shown in italic, and open in a new browser window.

Raw URLs found in your paragraph text without brackets are automatically converted to clickable links.

=section #.#.#. Email Addresses

By default, email addresses in paragraph text are automatically detected by the engine and converted into "mailto:" links.  If you would prefer this did not happen, add the {=email_links} tag in your header section and set it to {false}.

	=email_links false

=section #.#. Tables

Effect provides an easy way for you to include tables in your documents.  Simply insert a {=table} tag, followed by the headers, then one or more rows, and you are done.  Here is an example:

	=table
		First Name | Last Name | Salary
		Fred       | Smith     | $20,000
		George     | Beer      | $40,000
		Frank      | Richards  | $60,000

This would come out looking like:

=table
	First Name | Last Name | Salary
	Fred       | Smith     | $20,000
	George     | Beer      | $40,000
	Frank      | Richards  | $60,000

Header and row values are separated by pipes (\|) as you can see, but you don't have to line up the pipes exactly as in the above example -- it was just done for display purposes.  For example this would have produced the same table:

	=table
		First Name | Last Name | Salary
		Fred | Smith | $20,000
		George | Beer | $40,000
		Frank | Richards | $60,000

(Just make sure rows are indented with a tab.)

Feel free to include any normal formatting in the text, and it is interpreted as paragraph text (i.e. links, styling, etc.).  And if for whatever reason you |want| to show pipes, just escape them with backslashes: {\\|}.  The engine tries to discern the difference between italic text styling (which also uses pipes, see [Text Styling]) and table column delimiters.  This is done based on whether there are |spaces| between the pipes (e.g. space pipe space = table column delimiter).  Be warned.

Tables can also have "titles" which are shown in bold text just above the table.  Specify the table name on the {=table} line:

	=table My Table Title

=section #.#. Lists

Effect supports two different kinds of lists, *bullet* and *number* lists.  Bullet lists use various bullet characters (&bull;, &loz;, &diams;), while number lists auto-number the items starting with 1.  List syntax is simple:

	=list
		This is the first item
		This is the second item
			Oooh, a nested item!

The output would look like this:

=list
	This is the first item
	This is the second item
		Oooh, a nested item!

Notice the default list type is bullet.  If you prefer numbered lists, include the {=list_type} tag and set it to "{number}".  You can do this in your header section to affect all lists in your document, or repeat the tag multiple times to switch between list types as you see fit.

The indentation is important, as you can see.  The number of tabs is counted for each line, and that becomes the list indent, bullet type, etc.  Be sure to read about [Tabs] and make sure your text editor is using tabs as opposed to hard spaces.

As with tables, lists can also have "titles" which are shown in bold text just above the list.  To include a list title, simply declare it on the {=list} line.  Here is a more complete example:

	=list_type number
	=list My List Title
		First item here
			Sub-item here
			Second sub-item
		Back to the outer list
		You can also include |formatting| in lists.

This would come out looking like:

=list_type number
=list My List Title
	First item here
		Sub-item here
		Second sub-item
	Back to the outer list
	You can also include |formatting| in lists.
=list_type bullet

You can nest your lists up to 6 levels deep.

=section #.#. Definition Lists

Definition lists are basically special tables with only two columns -- the left column is the term you are defining, and the right column is the description.  The left column is also shaded and the text is embolden.  The format consists of a {=deflist} tag, followed by one or more indented lines.  As with tables, the columns should be separated by pipes (\|).  Here is an example:

	=deflist
		Term 1 | This is my description.
		Term 2 | Another description here.

This would come out looking like:

=deflist
	Term 1 | This is my description.
	Term 2 | Another description here.

Feel free to use formatting and links in column text.  You can also set a "title" for the list, which is shown in bold just above it.  As with standard lists and tables, the title is specified on the starting tag:

	=deflist My Title Here

=section #.#. Code / Markup Blocks

In many technical documents you will want to show snippets of code or markup and have it syntax-highlighted.  This is handled automatically by Effect.  Simply indent the code or markup with a tab, and the engine will automatically detect it.

Obviously there are different types of markup ([wikipedia:XML], [wikipedia:HTML], etc.), and different programming languages ([wikipedia:PHP], [wikipedia:Perl], [wikipedia:JavaScript], etc.).  Effect assumes that it is likely you will only need |one| type of markup and |one| type of code per document (but this can be changed).  You can set the default code and markup types in your document header with these tags:

	=markup xml
	=code javascript

Effect supports syntax-highlighting in the following markup and code languages:

=deflist Supported Languages
	Markup | [wikipedia:XML], [wikipedia:XSLT], [wikipedia:HTML]
	Code | [wikipedia:PHP], [wikipedia:Perl], [wikipedia:JavaScript], [wikipedia:C++], [wikipedia:SQL], [wikipedia:Cascading Style Sheets, CSS], [wikipedia:Shell Script]
	Text | Plain Text

If you need to vary these throughout your document, simple redeclare them before each indented block using the {=syntax} tag:

	=syntax html
		This is HTML I swear!
	
	=syntax perl
		This is Perl I swear!

Forcing the type affects only the next indented block, and will not change your default settings for code and markup types.  If you want to show the indented block in plain text without any formatting or syntax-highlighting, set the type to {text}:

	=syntax text
		<Text>Looks like XML, but I want it plain!</Text>

If you don't mind doing so, simply declaring each block type with the {=syntax} tag removes all the guesswork, and ensures your block will be syntax-highlighted correctly every time.  Alas, the automatic detection of code vs. markup vs. plain text is not perfect.

Here are all the values supported by the {=syntax} tag:

	=syntax xml
	=syntax xsl
	=syntax html
	=syntax php
	=syntax perl
	=syntax js
	=syntax c
	=syntax sql
	=syntax css
	=syntax sh
	=syntax text

Here are examples of all the supported syntax-highlighted languages:

Here is some XML:
=syntax xml
	<Element Attribute="Hello">
		This is XML
	</Element>

Here is some XSLT:
=syntax xsl
	<xsl:element name="Element">
		<xsl:value-of select="concat('Hello','There')"/>
	</xsl:element>

Here is some HTML:
=syntax html
	<p align="center">This is HTML</p>
	<table><tr><td>Hello</td></tr></table>

Here is some PHP:
=syntax php
	$x = 2; $y = "string";
	function myadd($a, $b) {
		// this is a comment
		return $a + $b;
	}

Here is some Perl:
=syntax Perl
	my $x = 2; 
	my $y = "string";
	sub myadd {
		# this is a comment
		my ($a, $b) = @_;
		return $a + $b;
	}

Here is some JavaScript:
=syntax js
	var x = 2;
	var y = "string";
	function myadd(a, b) {
		// this is a comment
		return a + b;
	}

Here is some C++:
=syntax c
	int x = 2;
	char y[20] = "string\0";
	int myadd(int a, int b) {
		/* this is a comment */
		return (a + b);
	}

Here is some SQL:
=syntax sql
	SELECT mediaset_name FROM listings WHERE 
		customer_id LIKE ? AND (
			modify_date BETWEEN
				cast(? as timestamp) AND
				cast(? as timestamp) AND
			status = 'A'
		)

Here is some CSS:
=syntax css
	.code_block {
		margin-left: 50px;
		padding: 5px;
		border: 1px solid #aaa;
		font-family: courier,monospace;
		font-size: 9pt;
		background-color: #eee;
	}

Here is some Shell Script:
=syntax bash
	case $ARG in
	start)
	if [ $RUNNING -eq 1 ]; then
		# this is a comment
		echo "$0 $ARG: httpd (pid $PID) already running"
		continue
	fi

=section #.#. Images

Including images in your documents is easy, and there are two methods for doing so.  First, if you want to include a large image (i.e. a screenshot), use the {=image} tag.  This centers the image with a border, on its own line.  Alternatively, if you want to include a smaller image inside a paragraph of text, or in a table element, use the {[http://url]} format, which generates a plain, inline image with no border.  For example:

	=image http://www.google.com/intl/en_ALL/images/logo.gif

This would be centered in the page with a border.  You can also add a caption under the image if you want, using the {=caption} tag:

	=image http://www.google.com/intl/en_ALL/images/logo.gif
	=caption This is the Google logo.

Here is what this would look like:

=image http://www.google.com/intl/en_ALL/images/logo.gif
=caption This is the Google logo.

Alternatively, you may simply want to embed an image right inside your paragraph text, or perhaps in a table cell.  This is more common with smaller images, and can be done by simply placing the image filename in square brackets: {[http://url]}.  The image is floated to the left side.

=section #.#. Notes

If you want to include a "note" in your document, which is displayed in an indented, colored box with a border, use the {=note} tag followed by your note text.  Feel free to include formatting and/or links in the note text.  Example:

	=note Don't forget to read my note!

This would come out looking like:

=note Don't forget to read my note!

=section #.#. Graphical File Layouts

Some technical documents need to describe filesystem layouts, such as a directory structure or filenaming scheme.  Effect has a method to produce simple "graphical" filesystem layouts using nested indents and icons.  To use it, insert the {=filesystem} tag, followed by your desired filesystem layout:

	=filesystem
		file1.txt
		file2.txt
		subdirectory/
			file3.txt
			file4.txt

This would come out looking like:

=filesystem
	file1.txt
	file2.txt
	subdirectory/
		file3.txt
		file4.txt

Directories are recognized by a trailing slash (/), otherwise the entry is considered to be a plain file.  Feel free to nest your filesystem any number of levels deep.  Filesystems can also have "titles" which are shown in bold text just above them.  Specify the title on the {=filesystem} line:

	=filesystem My File Layout

=section #.#.#. Errors

If any errors or warnings occur during compilation, they are displayed for your review.  It is recommended that you always click the "Preview..." button before saving your article, so you can review any errors before posting it live.  Here are some of the possible errors you can receive:

=table Effect Documentation Compiler Errors
	Error Message | Description
	{Unsupported handler: ...} | This means the engine has gotten itself into a bad state, and cannot process content.  Please check the syntax of your source document around the specified filename / line number.
	{Malformed deflist row: ...} | This means one of the rows in your definition list are malformed.  Please see [Definition Lists] for the proper syntax.
	{Unknown code type: ...} | This means you are trying to include an unsupported code language.  See [Code / Markup Blocks] for the list of supported languages.
	{Unknown markup type: ...} | This means you are trying to include an unsupported markup language.  See [Code / Markup Blocks] for the list of supported languages.
	{Malformed image URL: ...} | This means an image URL in your source document does not contain a valid filename extension.
	{Could not download URL: ...} | This means the engine could not fetch the specified URL, and the image will pass through as is.
	{Link not found: ...} | This means you have a link in your document that points to a nonexistent section.  Please confirm the spelling in your link.
	{Incorrect number of table columns: ...} | This means you have a table row that has an incorrect number of columns.
	{Duplicate section title: ...} | This means you have two or more sections with the same title.  While this is not a fatal error, it does mean that you cannot have links to the sections by their titles (the engine won't know which one you mean).  See [Links].

=section #.#. Tabs

Tabs are very important in Effect article source, as they control indent levels in lists, and dramatically change how text is interpreted.  For example, text indented with a tab is not considered normal paragraph text.  Depending on the current state, it could be code, markup, table rows, list items, etc.  However, certain text editors don't use |genuine tabs|, but a series of |spaces| instead.  This can confuse the Effect documentation compiler and render your articles incorrectly.  To see if your text editor uses tabs or spaces, press the *tab* key on your keyboard while editing a text file, then press the *left arrow* key.  If the cursor arrives |all the way| back before you typed the tab, your editor uses genuine tabs, and you are fine (i.e. the tab is considered a |single| character).  However, if your cursor only goes |one space| back, then your text editor is inserting a number of hard spaces instead of tabs.

Ideally, you should go to your text editor's preferences dialog and make sure it uses genuine tabs.  However, if you prefer hard spaces, you can change how Effect recognizes tabs by setting the {=tab_char} tag in your file header.  The default is a genuine tab, represented by "{\t}", but you can customize it.

	=tab_char \t

For example, if your text editor inserts |four| spaces for each tab (make sure you know |exactly| how many it really inserts), then you can change the {=tab_char} tag to match four hard spaces:

	=tab_char \s{4}

If you haven't already guessed, the syntax being used here is a [wikipedia:Regular Expression].  So "{\t}" is a genuine tab, and "{\s\{4\}}" is exactly four whitespace characters.

=note Effect ignores empty lines when reading source, but please be aware of *apparently* empty lines containing a tab.  These *are* interpreted, and deliberately, so vertical spaces in your code and markup snippets are preserved and rendered appropriately.  If you are troubleshooting a document with incorrect spacing or margins, be aware of empty lines in your source, and lines that *should* be interpreted.
