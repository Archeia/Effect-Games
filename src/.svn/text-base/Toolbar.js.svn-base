////
// Toolbar.js
// DHTML Game Engine 1.0 (EffectGames.com)
// Copyright (c) 2005 - 2009 Joseph Huckaby
////

function _Toolbar() {
	// class constructor
};

_Toolbar.prototype._init = function() {
	// setup toolbar
	
	// effect_container
	// effect_port
	// effect_toolbar
	// et_left_border
	// et_logo
	// et_right_border
	
	// et_loading_bar
	// et_lb_divider
	// et_lb_outer
	// et_lb_inner
	// et_lb_inner_under
	// et_lb_inner_over
	
	// et_icon_shelf
	// et_is_divider
		
	this._icons = [];
	
	// this._toolbar = el('effect_toolbar');
	// this._logo =  el('et_logo');
	// this._loading_bar = el('et_loading_bar');
	// this._loading_bar_over = el('et_lb_inner_over');
	// this._icon_shelf = el('et_icon_shelf');
	// this._msg_area = el('et_msgs');
	
	this.setColor( gGame._def.ToolbarColor );
	
	var _toolbar_width = el('effect_port').offsetWidth;
	
	var _tdiv = el('effect_toolbar');
	_tdiv.style.width = '' + _toolbar_width + 'px';
	
	// this._set_div_image('effect_toolbar', gGame._homePath + 'images/engine/toolbar/background.png');
	// setup toolbar background
	if (ua.ie6) {
		_tdiv.innerHTML += "<div id=\"effect_toolbar_ie6span\""
			+ " style=\"" + "width:" + _tdiv.offsetWidth + "px; height:" + _tdiv.offsetHeight + "px;"
			+ "filter:progid:DXImageTransform.Microsoft.AlphaImageLoader"
			+ "(src=\'" + gGame._homePath + 'images/engine/toolbar/background.png' + "\', sizingMethod='scale'); position:absolute; left:0px; top:0px;\"></div>";
	}
	else {
		_tdiv.style.backgroundImage = 'url('+gGame._homePath + 'images/engine/toolbar/background.png'+')';
	}
	
	this._set_div_image('et_left_border', gGame._homePath + 'images/engine/toolbar/border-left.png');
	this._set_div_image('et_right_border', gGame._homePath + 'images/engine/toolbar/border-right.png');
	this._set_div_image('et_lb_divider', gGame._homePath + 'images/engine/toolbar/divider.png');
	// this._set_div_image('et_is_divider', gGame._homePath + 'images/engine/toolbar/divider.png');
	this._set_div_image('et_logo', gGame._homePath + 'images/engine/toolbar/logo.png');
	this._set_div_image('et_msgs', gGame._homePath + 'images/engine/toolbar/msgs.png', 168, 48);
	
	this._logo_state = 'out';
	this._logo_width = 160;
	var _self = this;
	var _logod = el('et_logo');
	
	_logod.onmouseover = function() {
		var _logo_yoffset = (_self.theme == 'light') ? 48 : 0;
		var _y = _logo_yoffset + 24;
		_self._logo_state = 'over';
		this.style.clip = 'rect('+_y+'px '+_self._logo_width+'px '+Math.floor(_y + 24)+'px 0px)';
		this.style.top = '' + Math.floor(0 - _y) + 'px';
	};
	_logod.onmouseout = function() {
		var _logo_yoffset = (_self.theme == 'light') ? 48 : 0;
		var _y = _logo_yoffset;
		_self._logo_state = 'out';
		this.style.clip = 'rect('+_y+'px '+_self._logo_width+'px '+Math.floor(_y + 24)+'px 0px)';
		this.style.top = '' + Math.floor(0 - _y) + 'px';
	};
	_logod.onclick = function() {
		window.open('http://www.effectgames.com/');
		if (gGame.inGame) gGame.pause();
	};
	
	el('et_loading_bar').style.left = '' + Math.floor(_toolbar_width - 120) + 'px';
	
	this._set_div_image('et_lb_inner_under', gGame._homePath + 'images/engine/toolbar/loading-under.png');
	this._set_div_image('et_lb_inner_over', gGame._homePath + 'images/engine/toolbar/loading-over.png');
	
	el('et_lb_inner_under').style.backgroundColor = this._clr_hex;
	el('et_lb_inner_over').style.backgroundColor = (this.theme == 'dark') ? '#777777' : '#444444';
	
	// construct icon tray
	this._icon_x = 0;
	
	if (!gGame.fireHandler('onBeforeToolbarIconInit', this)) return;
	
	this.addIcon( new Toolbar.Icon.Divider() );
	
	this.addIcon( new Toolbar.Icon.PlayPause() );
	
	if ((gGame._query.mode != 'dev') && (gGame._query.revpwd != 1) && (gGame._def.DisableSharing != 1)) {
		this.addIcon( new Toolbar.Icon.Share() );
	}
	
	if (gGame._iframe) {
		this.addIcon( new Toolbar.Icon.Home() );
	}
	
	if (_num_keys(gGame.keys)) {
		this.addIcon( new Toolbar.Icon.Keyboard() );
	}
	
	var _has_music = false;
	if (gGame._def.Sounds && gGame._def.Sounds.Sound) {
		for (var _idx = 0, _len = gGame._def.Sounds.Sound.length; _idx < _len; _idx++) {
			var _sound = gGame._def.Sounds.Sound[_idx];
			if (_sound.Category == 'music') { _has_music = true; _idx = _len; }
		}
	}
	if (gAudio.enabled && _has_music) {
		this.addIcon( new Toolbar.Icon.Music() );
	}
	
	if (gAudio.enabled && gGame._def.Sounds && gGame._def.Sounds.Sound && gGame._def.Sounds.Sound.length) {
		this.addIcon( new Toolbar.Icon.Sound() );
	}
	
	if ((gGame._def.Zoom == 'Yes') && !gGame._iframe && this._zoom_is_possible()) {
		this.addIcon( new Toolbar.Icon.Zoom() );
	}
	
	if (Debug.enabled) {
		this.addIcon( new Toolbar.Icon.Debug() );
	}
	
	gGame.fireHandler('onAfterToolbarIconInit', this);
};

_Toolbar.prototype._zoom_is_possible = function() {
	// return true if zoom is possible given port size and screen size, false if no
	var _old_zoom = Effect.Port.getZoomLevel();
	var _width = Effect.Port.portWidth;
	var _height = Effect.Port.portHeight;
	
	var _max_width = screen.availWidth;
	var _max_height = screen.availHeight;
	
	var _max_level_x = Math.floor( _max_width / _width );
	var _max_level_y = Math.floor( _max_height / _height );
	var _max_level = Math.min( _max_level_x, _max_level_y );
	if (!_max_level) _max_level = 1;
	
	var _zoom = _old_zoom + 1;
	if (_zoom > Math.min(_max_level, 4)) _zoom = 1;
	
	if (_zoom != _old_zoom) return true;
	else return false;
};

_Toolbar.prototype._animate_msg = function() {
	// animate message in or out
	this._msg_anim_enabled = true;
	var _shelf_width = (this._mode == 'loading') ? el('et_loading_bar').offsetWidth : this._icon_x;
	var _toolbar_width = el('effect_toolbar').offsetWidth;
	var _offset_x = (this.theme == 'light') ? 84 : 0;
	var _vis_left = Math.floor(((_toolbar_width - _shelf_width) - 4) - 84);
	
	var _msg_area = el('et_msgs');
	_msg_area.style.left = '' + Math.floor((_vis_left - _offset_x) + this._msg_anim_frame) + 'px';
	_msg_area.style.top = '' + Math.floor(0 - (this._msg_idx * 24)) + 'px';
	_msg_area.style.clip = 'rect('+Math.floor(this._msg_idx * 24)+'px '+Math.floor((_offset_x+84) - this._msg_anim_frame)+'px '+Math.floor((this._msg_idx+1)*24)+'px '+Math.floor(_offset_x)+'px)';
	
	this._msg_anim_frame += ((this._msg_anim_target - this._msg_anim_frame) / 6);
	if (Math.abs(this._msg_anim_target - this._msg_anim_frame) < 1.0) {
		// we're done
		if (this._msg_anim_target == 84) {
			_msg_area.hide();
			this._msg_visible = false;
		}
		this._msg_anim_enabled = false;
	}
	else {
		// keep animating
		setTimeout( 'gToolbar._animate_msg();', 33 );
	}
};

_Toolbar.prototype._show_msg = function(_idx, _instant) {
	// show message in area
	// debugstr("in toolbar _show_msg(" + _idx + ', ' + (_instant ? 'true' : 'false') + ")");
	this._msg_idx = _idx;
	
	var _shelf_width = (this._mode == 'loading') ? el('et_loading_bar').offsetWidth : this._icon_x;
	var _toolbar_width = el('effect_toolbar').offsetWidth;
	var _offset_x = (this.theme == 'light') ? 84 : 0;
	
	var _vis_left = Math.floor(((_toolbar_width - _shelf_width) - 4) - 84);
	var _logod = el('et_logo');
	var _logo_right = _logod.offsetLeft + _logod.offsetWidth;
	if (_vis_left <= _logo_right) return false; // runs into logo, do not show
	
	if (typeof(this._msg_anim_frame) == 'undefined') this._msg_anim_frame = 84;
	this._msg_anim_target = 0;
	this._msg_visible = true;
	
	var _msg_area = el('et_msgs');
	
	if (_instant) {
		_msg_area.style.left = '' + Math.floor(_vis_left - _offset_x) + 'px';
		_msg_area.style.top = '' + Math.floor(0 - (this._msg_idx * 24)) + 'px';
		_msg_area.style.clip = 'rect('+Math.floor(this._msg_idx * 24)+'px '+Math.floor(_offset_x+84)+'px '+Math.floor((this._msg_idx+1)*24)+'px '+Math.floor(_offset_x)+'px)';
	}
	else {
		this._animate_msg();
	}
	
	_msg_area.show();
	
	return true;
};

_Toolbar.prototype._hide_msg = function(_instant) {
	// hide message area
	// debugstr("in toolbar _hide_msg(" + (_instant ? 'true' : 'false') + ")");
	if (this._msg_visible) {
		if (_instant) {
			el('et_msgs').hide();
			this._msg_visible = false;
		}
		else {
			if (typeof(this._msg_anim_frame) == 'undefined') this._msg_anim_frame = 0;
			this._msg_anim_target = 84;
			this._animate_msg();
		}
	}
};

_Toolbar.prototype.setColor = function(_clr_hex) {
	// set toolbar theme color
	this._clr_hex = _clr_hex;
	this._clr = _HEX2RGB(this._clr_hex);
	
	var _avg = (this._clr.r + this._clr.g + this._clr.b) / 3;
	this.theme = (_avg > 128) ? 'light' : 'dark';
	
	el('effect_toolbar').style.backgroundColor = this._clr_hex;
	
	var _logo_yoffset = (this.theme == 'light') ? 48 : 0;
	var _logod = el('et_logo');
	_logod.style.clip = 'rect('+_logo_yoffset+'px 160px '+Math.floor(_logo_yoffset + 24)+'px 0px)';
	_logod.style.top = '' + Math.floor(0 - _logo_yoffset) + 'px';
};

_Toolbar.prototype._update_width = function(_toolbar_width) {
	// update toolbar width, called when port resizes
	if (!_toolbar_width) _toolbar_width = el('effect_port').offsetWidth;
	el('effect_toolbar').style.width = '' + _toolbar_width + 'px';
	
	// right-align loading bar and icon shelf
	el('et_loading_bar').style.left = '' + Math.floor(_toolbar_width - 120) + 'px';
	el('et_icon_shelf').style.left = '' + Math.floor((_toolbar_width - this._icon_x) - 4) + 'px';
	
	// show minimized or maximized logo depending on available width
	var _logod = el('et_logo');
	if (_toolbar_width - this._icon_x >= 160) {
		this._logo_width = 160;
		_logod.style.width = '160px';
	}
	else {
		this._logo_width = 32;
		_logod.style.width = '32px';
	}
	if (this._logo_state == 'over') _logod.onmouseover();
	else _logod.onmouseout();
	
	if (this._msg_visible && !this._msg_anim_enabled) {
		this._show_msg(this._msg_idx, true);
	}
	
	if (ua.ie6) {
		var _span = el('effect_toolbar_ie6span');
		if (_span) {
			_span.style.width = '' + _toolbar_width + 'px';
		}
	}
};

_Toolbar.prototype.addIcon = function(_icon) {
	// add icon to shelf
	_icon.init( this, this._icon_x );
	
	el('et_icon_shelf').appendChild(_icon.div);
	
	this._icons.push(_icon);
	
	this._icon_x += _icon.width;
	
	var _shelf_width = this._icon_x;
	var _toolbar_width = el('effect_toolbar').offsetWidth;
	
	el('et_icon_shelf').style.width = '' + _shelf_width + 'px';
	el('et_icon_shelf').style.left = '' + Math.floor((_toolbar_width - _shelf_width) - 4) + 'px';
};

_Toolbar.prototype._update = function() {
	// update all icons
	for (var _idx = 0, _len = this._icons.length; _idx < _len; _idx++) {
		this._icons[_idx].update();
	}
};

_Toolbar.prototype.logic = function() {
	// delegate to all icons
	for (var _idx = 0, _len = this._icons.length; _idx < _len; _idx++) {
		this._icons[_idx].logic();
	}
};

_Toolbar.prototype.draw = function() {
	// delegate to all icons
	for (var _idx = 0, _len = this._icons.length; _idx < _len; _idx++) {
		this._icons[_idx].draw();
	}
};

_Toolbar.prototype.pause = function() {
	// delegate to all icons
	for (var _idx = 0, _len = this._icons.length; _idx < _len; _idx++) {
		this._icons[_idx].pause();
	}
};

_Toolbar.prototype.resume = function() {
	// delegate to all icons
	for (var _idx = 0, _len = this._icons.length; _idx < _len; _idx++) {
		this._icons[_idx].resume();
	}
};

_Toolbar.prototype.audioloaderror = function() {
	// delegate to all icons
	for (var _idx = 0, _len = this._icons.length; _idx < _len; _idx++) {
		if (this._icons[_idx].audioloaderror) {
			this._icons[_idx].audioloaderror();
		}
	}
};

_Toolbar.prototype._set_div_image = function(_id, _url, _width, _height) {
	// set div background, supporting IE 6
	var _div = (typeof(_id) == 'string') ? el(_id) : _id;
	
	// debugstr("in _Toolbar._set_div_image");
	
	if (!_width) _width = _div.offsetWidth;
	if (!_height) _height = _div.offsetHeight;
	
	if (ua.ie6 && _url.match(/\.png(\?|$)/i)) {
		// var _temp = (typeof(_id) == 'string') ? ('id="'+_id+'_ie6span"') : '';
		var _html = "<div "
			+ " style=\"" + "width:" + _width + "px; height:" + _height + "px;"
			+ "filter:progid:DXImageTransform.Microsoft.AlphaImageLoader"
			+ "(src=\'" + _url + "\', sizingMethod='scale');\"></div>";
		
		// debugstr("IE6 crap: " + _html );
		
		_div.innerHTML = _html;
	}
	else {
		_div.style.backgroundImage = 'url('+_url+')';
	}
};

_Toolbar.prototype._set_mode = function(_mode) {
	debugstr("setting toolbar mode: " + _mode);
	this._mode = _mode;
	switch (_mode) {
		case 'loading':
			el('et_loading_bar').show();
			el('et_icon_shelf').hide();
			this._show_msg(0, true);
			break;
		
		case 'icons':
			el('et_loading_bar').hide();
			el('et_icon_shelf').show();
			if (gGame.inGame || gGame._runAfterZoom) this._hide_msg(true);
			else this._show_msg(1, true);
			break;
	}
};

_Toolbar.prototype._set_loading_progress = function(_counter) {
	var _left = '-' + Math.floor( (1.0 - _counter) * 100 );
	el('et_lb_inner_over').style.left = '' + _left + 'px';
};

_Toolbar.prototype._dialog_image = function(_name, _width, _height, _opacity) {
	if (!_opacity) _opacity = "1.0";
	var _dialog_dir = gGame._homePath + 'images/engine/dialog';
	var _url = _dialog_dir + '/' + _name + ((this.theme == 'light') ? '-light' : '-dark') + '.png';
	// var _url = _dialog_dir + '/' + _name + '.png';
	
	if (ua.ie6 && _url.match(/\.png(\?|$)/i)) {
		return "<div "
			+ " style=\"" + "width:" + _width + "px; height:" + _height + "px;"
			+ "filter:progid:DXImageTransform.Microsoft.AlphaImageLoader"
			+ "(src=\'" + _url + "\', sizingMethod='scale');\"></div>";
	}
	else {
		return '<img src="'+_url+'" width="'+_width+'" height="'+_height+'" style="opacity:'+_opacity+';"/>';
	}
};

/* _Toolbar.prototype._dialog_button = function(_icon, _label, _code) {
	var _clr_name = (this.theme == 'dark') ? 'white' : 'black';
	if (!_label) _label = '';
	if (!_code) _code = '';
	_code = 'gGame._toolbar._dialogHandler.' + _code;
	var _html = '';
	var _url = gGame._homePath + 'images/icons/' + _icon;
	_html += '<table cellspacing="0" cellpadding="0" style="cursor:pointer; border:1px solid #888; border-collapse:collapse; -moz-border-radius:4px; -webkit-border-radius:4px; border-radius:4px;" onMouseOver="this.style.border=\'1px solid '+_clr_name+'\';" onMouseOut="this.style.border=\'1px solid #888\';" onClick="'+_code+'"><tr>';
	_html += '<td width="16"><div style="padding:5px;"><img src="'+_url+'" width="16" height="16" border="0" title="'+_label+'"/></div></td>';
	if (_label) {
		_html += '<td><div style="padding:5px; font-family:arial,sans-serif; font-size:12px;">';
		_html += _label;
		_html += '</div></td>';
	}
	_html += '</tr></table>';
	return _html;
}; */

_Toolbar.prototype._dialog_button = function(_icon, _label, _code) {
	var _clr_name = (this.theme == 'dark') ? 'white' : 'black';
	if (!_label) _label = '';
	if (!_code) _code = '';
	_code = 'gToolbar._dialogHandler.' + _code;
	var _html = '';
	// _html += '<div style="cursor:pointer; width:80px; padding:5px; font-family:arial,sans-serif; font-size:12px; text-align:center; color:#888; border:1px solid #888;" onClick="'+_code+'" onMouseOver="this.style.border=\'1px solid white\';this.style.color=\'white\';" onMouseOut="this.style.border=\'1px solid #888\';this.style.color=\'#888\';">'+_label+'</div>';
	
	_html += '<div style="cursor:pointer; width:80px; padding:5px; font-family:arial,sans-serif; font-size:12px; text-align:center; color:'+_clr_name+'; border:2px solid '+_clr_name+'; -moz-border-radius:5px; -webkit-border-radius:5px; opacity:0.6;" onClick="'+_code+'" onMouseOver="this.style.opacity=1.0;" onMouseOut="this.style.opacity=0.6;">'+_label+'</div>';
	
	return _html;
};

_Toolbar.prototype._is_dialog_border_enabled = function() {
	var _zPortWidth = gPort.portWidth * gPort._zoomLevel;
	var _zPortHeight = gPort.portHeight * gPort._zoomLevel;
	return ((_zPortWidth >= 256 + 48) && (_zPortHeight >= 240 + 48));
};

_Toolbar.prototype._dialog_bkgnd_style = function(_name) {
	var _dialog_dir = gGame._homePath + 'images/engine/dialog';
	var _suffix = (this.theme == 'light') ? '-light' : '-dark';
	var _url = _dialog_dir+'/'+_name+_suffix+'.png';
	if (ua.ie6) return 'filter:progid:DXImageTransform.Microsoft.AlphaImageLoader(src=\''+_url+'\', sizingMethod=\'scale\')';
	else return 'background-image:url('+_url+')';
};

_Toolbar.prototype._show_overlay = function(_overlay_opacity) {
	// animate overlay visible
	var _zoom = gGame.changingZoom ? gPort._oldZoomLevel : gPort._zoomLevel;
	var _zPortWidth = gPort.portWidth * _zoom;
	var _zPortHeight = gPort.portHeight * _zoom;
	
	if (!this._overlay) {
		this._overlay = el('effect_overlay');
		_set_opacity( this._overlay, 0 );
		this._overlay._opacity = 0;
	}
	this._overlay._target_opacity = _overlay_opacity || 0.75;
	
	this._overlay.style.display = 'block';
	this._overlay.style.width = '' + _zPortWidth + 'px';
	this._overlay.style.height = '' + _zPortHeight + 'px';
	// this._overlay.style.backgroundColor = this._clr_hex;
	this._overlay.style.backgroundColor = (this.theme == 'light') ? 'white' : 'black';
	
	// animate overlay opacity
	if (ua.ie) {
		_set_opacity( this._overlay, this._overlay._target_opacity );
	}
	else {
		if (!this._overlay_timer) {
			this._overlay_timer = setTimeout( 'gToolbar._animate_overlay()', 33 );
		}
	}
};

_Toolbar.prototype._show_dialog = function(_handler, _title_idx, _inner_html, _disable_border, _overlay_opacity) {
	// show popup dialog
	if (typeof(this._saveInGame) == 'undefined') {
		this._saveInGame = gGame.inGame;
		if (gGame.inGame) gGame.pause();
	}
	
	var _zPortWidth = gPort.portWidth * gPort._zoomLevel;
	var _zPortHeight = gPort.portHeight * gPort._zoomLevel;
	
	this._dialog = el('effect_dialog');
	
	this._show_overlay( _overlay_opacity );
	
	var _title_url = gGame._homePath + 'images/engine/dialog/titles.png';
	var _title_html = '';
	var _title_x = (this.theme == 'light') ? -256 : 0;
	var _title_y = 0 - (_title_idx * 32);
	
	if (ua.ie6) {
		_title_html += '<div style="width:256px; height:32px; position:relative; overflow:hidden;">';
		_title_html += '<div style="width:512px; height:192px; position:absolute; left:'+_title_x+'px; top:'+_title_y+'px;">';
		_title_html += "<div "
			+ " style=\"" + "width:512px; height:192px;"
			+ "filter:progid:DXImageTransform.Microsoft.AlphaImageLoader"
			+ "(src=\'" + _title_url + "\', sizingMethod='scale');\"></div>";
		_title_html += '</div>';
		_title_html += '</div>';
	}
	else {
		_title_html += '<div style="width:256px; height:32px; background:url('+_title_url+') '+_title_x+'px '+_title_y+'px;"></div>';
	}
	_title_html += '<div style="height:10px;"></div>';
	
	var _html = '';
	
	if (this._is_dialog_border_enabled() && !_disable_border) {
		var _dialog_dir = gGame._homePath + 'images/engine/dialog';
		var _suffix = (this.theme == 'light') ? '-light' : '-dark';
		_html += '<table cellspacing="0" cellpadding="0">';
		
			// top row
			_html += '<tr>';
			_html += '<td width="20" height="20">' + this._dialog_image('top-left', 20, 20, 1.0) + '</td>';
			_html += '<td width="*" height="20" style="'+this._dialog_bkgnd_style('top')+'"></td>';
			_html += '<td width="20" height="20">' + this._dialog_image('top-right', 20, 20, 1.0) + '</td>';
			_html += '</tr>';
		
			// middle row
			_html += '<tr>';
			_html += '<td width="20" height="*" style="'+this._dialog_bkgnd_style('left')+'"></td>';
			_html += '<td width="*" height="*" align="center" valign="center" style="'+this._dialog_bkgnd_style('center')+'">';
				_html += '<div style="position:relative; margin:10px 0px 15px 0px;">' + _title_html + _inner_html + '</div>';
			_html += '</td>';
			_html += '<td width="20" height="*" style="'+this._dialog_bkgnd_style('right')+'"></td>';
			_html += '</tr>';
		
			// bottom row
			_html += '<tr>';
			_html += '<td width="20" height="20">' + this._dialog_image('bottom-left', 20, 20, 1.0) + '</td>';
			_html += '<td width="*" height="20" style="'+this._dialog_bkgnd_style('bottom')+'"></td>';
			_html += '<td width="20" height="20">' + this._dialog_image('bottom-right', 20, 20, 1.0) + '</td>';
			_html += '</tr>';
		
		_html += '</table>';
	}
	else {
		// mininal dialog for small portals
		_html += _title_html + _inner_html;
	}
	
	this._dialog.style.display = 'block';
	this._dialog.style.width = '' + _zPortWidth + 'px';
	this._dialog.style.height = '' + _zPortHeight + 'px';
	this._dialog.innerHTML = '<table cellspacing="0" cellpadding="0" border="0" width="'+_zPortWidth+'" height="'+_zPortHeight+'"><tr><td align="center" valign="center" style="color:'+((this.theme == 'dark') ? 'white' : 'black')+'">' + _html + '</td></tr></table>';
	
	this._dialogActive = true;
	this._dialogHandler = _handler;
	
	this._dialog.onmousedown = function() {};
};

_Toolbar.prototype._animate_overlay = function() {
	// animate dialog overlay
	// var _target = this._dialogActive ? this._overlay._target_opacity : 0;	
	var _target = this._overlay._target_opacity;
	this._overlay._opacity += ((_target - this._overlay._opacity) / 8);
	
	if (Math.abs(_target - this._overlay._opacity) < 0.01) {
		this._overlay._opacity = _target;
		delete this._overlay_timer;
		
		if (!_target) {
			this._overlay.style.display = 'none';
			this._overlay.style.width = '1px';
			this._overlay.style.height = '1px';
		}
	}
	else {
		this._overlay_timer = setTimeout( 'gToolbar._animate_overlay()', 33 );
	}
	
	_set_opacity( this._overlay, this._overlay._opacity );
};

_Toolbar.prototype._hide_overlay = function() {
	// animate overlay to hidden
	this._overlay._target_opacity = 0;
	
	var _zPortWidth = gPort.portWidth * gPort._zoomLevel;
	var _zPortHeight = gPort.portHeight * gPort._zoomLevel;
	
	this._overlay.style.width = '' + _zPortWidth + 'px';
	this._overlay.style.height = '' + _zPortHeight + 'px';
	
	if (ua.ie) {
		this._overlay.style.display = 'none';
		this._overlay.style.width = '1px';
		this._overlay.style.height = '1px';
	}
	else {
		if (!this._overlay_timer) {
			this._overlay_timer = setTimeout( 'gToolbar._animate_overlay()', 33 );
		}
	}
};

_Toolbar.prototype._hide_dialog = function(no_splash) {
	// hide popup dialog
	if (this._dialogHandler && this._dialogHandler._shutdown) {
		this._dialogHandler._shutdown();
	}
	
	this._dialog.innerHTML = '';
	this._dialog.style.display = 'none';
	this._dialog.style.width = '1px';
	this._dialog.style.height = '1px';
	
	this._hide_overlay();
	
	if (this._saveInGame) gGame.resume();
	delete this._saveInGame;
	
	this._dialogActive = false;
	
	if (!gGame.inGame && gGame.loaded && !no_splash) this._show_pause_splash();
};

_Toolbar.prototype._show_splash = function() {
	// show splash screen (click to play)
	gGame._progress.show(1); // 1==splash
	
	var _html = '';
	var _url = gGame._homePath + 'images/engine/dialog/play.png';
	
	_html += '<div style="width:160px; height:160px; position:relative; overflow:hidden; cursor:pointer;">';
		_html += '<div style="width:160px; height:320px; position:absolute; left:0px; top:0px;" onMouseOver="this.style.top=\'-160px\';" onMouseOut="this.style.top=\'0px\';" onClick="gToolbar._click_play()">';
			if (ua.ie6) {
				_html += "<div "
					+ " style=\"" + "width:160px; height:320px;"
					+ "filter:progid:DXImageTransform.Microsoft.AlphaImageLoader"
					+ "(src=\'" + _url + "\', sizingMethod='scale');\"></div>";
			}
			else {
				_html += '<img src="'+_url+'" width="160" height="320"/>';
			}
		_html += '</div>';
	_html += '</div>';
	
	this._show_dialog( this, 4, _html, true, 0.5 );
	
	this._dialog.onmousedown = function() {
		gGame._toolbar._click_play();
	};
	
	// hide loading bar, icons
	el('et_loading_bar').hide();
	el('et_msgs').hide();
};

_Toolbar.prototype._click_play = function() {
	// hide splash, continue loading game
	this._hide_dialog();
	
	gGame._progress.show(0); // 0==loading
	
	el('et_loading_bar').show();
	el('et_msgs').show();
	
	gGame._load3();
};

_Toolbar.prototype._show_pause_splash = function() {
	// show splash screen for paused state
	if (Debug.enabled) return; // no splash for debug mode
	
	var _html = '';
	var _url = gGame._homePath + 'images/engine/dialog/play.png';

	_html += '<div style="width:160px; height:160px; position:relative; overflow:hidden; cursor:pointer;">';
		_html += '<div style="width:160px; height:320px; position:absolute; left:0px; top:0px;" onMouseOver="this.style.top=\'-160px\';" onMouseOut="this.style.top=\'0px\';" onClick="gGameControl.resume()">';
			if (ua.ie6) {
				_html += "<div "
					+ " style=\"" + "width:160px; height:320px;"
					+ "filter:progid:DXImageTransform.Microsoft.AlphaImageLoader"
					+ "(src=\'" + _url + "\', sizingMethod='scale');\"></div>";
			}
			else {
				_html += '<img src="'+_url+'" width="160" height="320"/>';
			}
		_html += '</div>';
	_html += '</div>';
	
	this._show_dialog( this, 5, _html, true, 0.5 );
	
	this._dialog.onmousedown = function() {
		gGame.resume();
	};
};

Class.create( 'Toolbar.Icon', {
	
	img_src: '',
	x: 0,
	clip_x: 0,
	width: 24,
	height: 24,
	img_width: 264,
	img_height: 48,
	title: '',
	
	__construct: function() {
		// class constructor
	},
	
	init: function(_toolbar, _x) {
		// create icon
		this.x = _x;
		this._toolbar = _toolbar;
		if (!this.img_src) this.img_src = gGame._homePath + 'images/engine/toolbar/icons.png';
		
		this.div = document.createElement('div');
		this.div.setAttribute('title', this.title);
		this.style = this.div.style;
		this.style.position = 'absolute';
		
		if (ua.op) {
			this.style.left = '' + Math.floor(_x) + 'px';
			this.style.top = '0px';
			this.style.width = '' + this.width + 'px';
			this.style.height = '' + this.height + 'px';
			this.style.backgroundImage = 'url('+this.img_src+')';
			this.style.backgroundPosition = '-' + this.clip_x + 'px -24px';
		}
		else {
			this.style.left = '' + Math.floor(_x - this.clip_x) + 'px';
			this.style.top = '-24px';
			this.style.width = '' + this.img_width + 'px';
			this.style.height = '' + this.img_height + 'px';
			this.style.clip = 'rect(24px '+Math.floor(this.clip_x + 24)+'px 48px '+this.clip_x+'px)';
			this._toolbar._set_div_image( this.div, this.img_src, this.img_width, this.img_height );
		}
		this.style.cursor = 'pointer';
		
		this.state = 'out';
		
		var icon = this;
		this.div.onmouseover = function() { icon.onMouseOver(); };
		this.div.onmouseout = function() { icon.onMouseOut(); };
		this.div.onclick = function() { icon.onClick(); };
	},
	
	onMouseOver: function() {
		if (ua.op) {
			this.style.backgroundPosition = '-' + this.clip_x + 'px -0px';
		}
		else {
			this.style.left = '' + Math.floor(this.x - this.clip_x) + 'px';
			this.style.clip = 'rect(0px '+Math.floor(this.clip_x + 24)+'px 24px '+this.clip_x+'px)';
			this.style.top = '0px';
		}
		this.state = 'over';
	},
	
	onMouseOut: function() {
		if (ua.op) {
			this.style.backgroundPosition = '-' + this.clip_x + 'px -24px';
		}
		else {
			this.style.left = '' + Math.floor(this.x - this.clip_x) + 'px';
			this.style.clip = 'rect(24px '+Math.floor(this.clip_x + 24)+'px 48px '+this.clip_x+'px)';
			this.style.top = '-24px';
		}
		this.state = 'out';
	},
	
	refresh: function() {
		// refresh clip
		if (this.state == 'over') this.onMouseOver();
		else this.onMouseOut();
	},
	
	onClick: function() {},
	
	logic: function() {},
	draw: function() {},
	pause: function() {},
	resume: function() {},
	
	update: function() {}
	
} );

Toolbar.Icon.extend( 'Toolbar.Icon.Divider', {
	
	width: 8,
	
	init: function(_toolbar, _x) {
		this._toolbar = _toolbar;
		this.div = document.createElement('div');
		this.style = this.div.style;
		this.style.position = 'absolute';
		this.style.left = '' + _x + 'px';
		this.style.top = '-0px';
		this.style.width = '8px';
		this.style.height = '24px';
		
		this._toolbar._set_div_image( this.div, gGame._homePath + 'images/engine/toolbar/divider.png', 8, 24);
	}
	
});

Toolbar.Icon.extend( 'Toolbar.Icon.PlayPause', {
	
	clip_x: 0,
	title: 'Play/Pause',
	
	onClick: function() {
		gGame.toggle();
	},
	pause: function() {
		// game is now paused, so show play icon
		this.clip_x = 0;
		this.refresh();
		this._toolbar._show_msg(1, false);
		this._toolbar._show_pause_splash();
	},
	resume: function() {
		// game is running, so show pause icon
		this.clip_x = 24;
		this.refresh();
		this._toolbar._hide_msg(false);
		if (this._toolbar._dialogActive) this._toolbar._hide_dialog();
	},
	
	logic: function() {
		// game is obviously running, so show pause
		if (this.clip_x == 0) this.resume();
	}
	
} );

Toolbar.Icon.extend( 'Toolbar.Icon.Share', {
	
	clip_x: 2 * 24,
	title: 'Share Game',
	
	onClick: function() {
		var _html = '';
		
		var _game_url = gGame._homePath + 'api/gf/' + gGame.id + '/' + gGame._query.rev;
		var _width = (parseInt(gGame._def.PortWidth, 10) * parseInt(gGame._def.ZoomDefault, 10));
		var _height = (parseInt(gGame._def.PortHeight, 10) * parseInt(gGame._def.ZoomDefault, 10)) + 24;
		var _embed_html = '<iframe src="'+_game_url+'" style="width:'+_width+'px; height:'+_height+'px; margin:0; padding:0;" frameborder="0" scrolling="no"></iframe>';
		
		var _clr_name = (this._toolbar.theme == 'dark') ? 'white' : 'black';
		var _cstyle = 'font-family:arial,sans-serif; font-size:10px; opacity:0.75; color:'+_clr_name+'; cursor:default;';
		var _dialog_dir = gGame._homePath + 'images/engine/dialog';
		
		var _zPortWidth = gPort.portWidth * gPort._zoomLevel;
		var _ta_width = (_zPortWidth < 640) ? ((_zPortWidth < 480) ? 150 : 214) : 320;
		var _fb_width = (_zPortWidth < 480) ? 64 : 128;
		var _lp_width = (_zPortWidth < 320) ? 0 : 10;
		
		_html += '<div style="margin-left:'+_lp_width+'px;">';
		_html += '<table cellspacing="0" cellpadding="0">';
			_html += '<tr>';
				_html += '<td align="left" valign="top">';
					_html += '<div style="'+_cstyle+' margin-bottom:5px; width:'+_ta_width+'px;">Paste this HTML into your website or blog:</div>';
					_html += '<form style="margin:0; padding:0;"><textarea style="width:'+_ta_width+'px; height:64px; outline:0; font-family:courier,monospace; font-size:11px; color:'+_clr_name+'; background-color:transparent; border:1px dashed '+_clr_name+'; word-break:break-all; opacity:0.75;" wrap="virtual" onkeyup="return _stop_textarea_key_event(event)" onkeydown="return _stop_textarea_key_event(event)" onClick="_select_all_text(this)">' + _encode_entities(_embed_html) + '</textarea></form>';
				_html += '</td>';
				_html += '<td>';
					_html += '<div style="width:10px;"></div>';
				_html += '</td>';
				_html += '<td align="center" valign="top">';
					_html += '<div style="'+_cstyle+' margin-bottom:5px; width:'+_fb_width+'px;">Or, click to share it on:</div>';
					_html += '<div><img src="'+_dialog_dir+'/facebook-logo.gif" width="64" height="24" style="cursor:pointer; border:1px solid transparent;" onClick="gToolbar._dialogHandler._share_on_facebook()" onMouseOver="this.style.border=\'1px solid '+_clr_name+'\';" onMouseOut="this.style.border=\'1px solid transparent\';"/></div>';
					_html += '<div style="height:16px;"></div>';
					_html += '<div><img src="'+_dialog_dir+'/twitter-logo.'+(ua.ie6 ? 'gif' : 'png')+'" width="64" height="24" style="cursor:pointer; border:1px solid transparent;" onClick="gToolbar._dialogHandler._share_on_twitter()" onMouseOver="this.style.border=\'1px solid '+_clr_name+'\';" onMouseOut="this.style.border=\'1px solid transparent\';"/></div>';
				_html += '</td>';
			_html += '</tr>';
		_html += '</table>';
		_html += '</div>';
		
		_html += '<div style="height:20px;"></div>';
		
		_html += '<table cellspacing="0" cellpadding="0"><tr>';
		_html += '<td><div style="width:10px;"></div></td>';
		_html += '<td>' + this._toolbar._dialog_button('arrow_turn_left.png', 'Back', "_do_cancel()") + '</td>';
		// _html += '<td><div style="width:30px;"></div></td>';
		// _html += '<td>' + this._toolbar._dialog_button('accept.png', '<b>Save</b>', "_do_save()") + '</td>';
		_html += '<td><div style="width:10px;"></div></td>';
		_html += '</tr></table>';
		
		this._toolbar._show_dialog(this, 1, _html);
	},
	
	_share_on_facebook: function() {
		var _game_url = gGame._homePath + 'games/' + gGame.id + '/' + gGame._query.rev;
		window.open(
			'http://www.facebook.com/sharer.php?u='+encodeURIComponent(_game_url)+'&t='+encodeURIComponent(gGame._def.Title),
			'sharer','toolbar=0,status=0,width=626,height=436');
	},
	
	_share_on_twitter: function() {
		var _game_url = gGame._homePath + 'games/' + gGame.id + '/' + gGame._query.rev;
		var _text = 'Playing ' + gGame._def.Title + ' on EffectGames.com: ' + _game_url;
		window.open( 'http://twitter.com/home?status=' + encodeURIComponent(_text) );
	},
	
	_do_cancel: function() {
		// cancel dialog, return to game
		this._toolbar._hide_dialog();
	}
	
} );

Toolbar.Icon.extend( 'Toolbar.Icon.Home', {
	
	clip_x: 3 * 24,
	title: 'Play on EffectGames.com',
	
	onClick: function() {
		var _game_url = gGame._homePath + 'games/' + gGame.id + '/' + gGame._query.rev;
		window.open( _game_url );
		
		if (gGame.inGame) gGame.pause();
	}
	
} );

Toolbar.Icon.extend( 'Toolbar.Icon.Debug', {
	
	clip_x: 10 * 24,
	title: 'Open Debugger',
	
	onClick: function() {
		Debug.show();
	}
	
} );

Toolbar.Icon.extend( 'Toolbar.Icon.Keyboard', {
	
	clip_x: 4 * 24,
	title: 'Set Controls',
	
	_get_pkeys: function() {
		// convert game keys into "serializable" format for storing in cookie
		// or saving for restore if dialog is cancelled
		var _pkeys = {};
		for (var _key in gGame.keys) {
			_pkeys[_key] = _deep_copy_object( gGame.keys[_key].code );
		}
		return _pkeys;
	},
	
	onClick: function() {
		this._save_codes = this._get_pkeys();
		
		var _zPortHeight = gPort.portHeight * gPort._zoomLevel;
		var _dlg_border_height = this._toolbar._is_dialog_border_enabled() ? (24 + 24 + 15 + 10) : 0;
		
		var _html = '';
		
		var _clr_name = (this._toolbar.theme == 'dark') ? 'white' : 'black';
		var _rev_clr = (this._toolbar.theme == 'dark') ? 'black' : 'white';
		
		var _keydefs = _always_array( gGame._def.Keys.Key );
		
		var _max_height = (_zPortHeight - _dlg_border_height) - (42 + 55 + 8);
		var _overflow = ((_keydefs.length * 24) >= _max_height);
		
		if (_overflow) _html += '<div style="height:'+_max_height+'px; overflow-x:hidden; overflow-y:auto;">';
		
		_html += '<table width="256" cellspacing="0" cellpadding="0">';
		for (var _idx = 0, _len = _keydefs.length; _idx < _len; _idx++) {
			var _keydef = _keydefs[_idx];
			_html += '<tr>';
			_html += '<td align="right"><div style="padding:5px 15px 5px 5px; font-family:arial,sans-serif; font-size:12px; font-weight:bold; opacity:0.75; cursor:default; text-shadow:'+_rev_clr+' 0px 0px 2px;"><nobr>'+_keydef.Title+':</nobr></div></td>';
			_html += '<td align="left"><div id="d_key_'+_keydef.Name+'" style="padding:5px; font-family:courier,monospace; font-size:12px; font-weight:bold; cursor:pointer; border:1px solid transparent; text-shadow:'+_rev_clr+' 0px 0px 2px;" onMouseOver="this.style.border=\'1px solid '+_clr_name+'\';" onMouseOut="this.style.border=\'1px solid transparent\';" onClick="gToolbar._dialogHandler._edit_key(\''+_keydef.Name+'\')">';
			
			var _codes = gGame.keys[ _keydef.Name ].code;
			var _nices = [];
			for (var _idy = 0, _ley = _codes.length; _idy < _ley; _idy++) {
				_nices.push( gGame._getNiceKeyName(_codes[_idy]) );
			}
			_html += _nices.join(', ');
			
			_html += '</div></td>';
			_html += '</tr>';
		}
		_html += '</table>';
		
		if (_overflow) _html += '</div>';
		
		_html += '<div style="height:20px;"></div>';
		
		_html += '<table cellspacing="0" cellpadding="0"><tr>';
		_html += '<td><div style="width:10px;"></div></td>';
		_html += '<td>' + this._toolbar._dialog_button('arrow_turn_left.png', 'Cancel', "_do_cancel()") + '</td>';
		_html += '<td><div style="width:30px;"></div></td>';
		_html += '<td>' + this._toolbar._dialog_button('accept.png', '<b>Save</b>', "_do_save()") + '</td>';
		_html += '<td><div style="width:10px;"></div></td>';
		_html += '</tr></table>';
				
		this._toolbar._show_dialog(this, 0, _html);
	},
	
	_edit_key: function(_id) {
		// show dialog to edit single key def
		var _keydef = this._keydef = _find_object( _always_array(gGame._def.Keys.Key), { Name: _id } );
		this._codes = _deep_copy_object( gGame.keys[ _keydef.Name ].code );
		
		var _clr_name = (this._toolbar.theme == 'dark') ? 'white' : 'black';
		var _html = '';
		
		_html += '<div style="cursor:default; font-family:arial,sans-serif; font-size:16px; font-weight:bold; text-align:center; color:'+_clr_name+'; opacity:0.75;">'+_keydef.Title+'</div>';
		
		_html += '<div id="d_key_codes" style="width:200px; height:70px; border:1px solid '+_clr_name+'; margin:10px 0px 5px 0px; padding:5px; overflow-x:hidden; overflow-y:auto;">' + this._render_edit_key_codes() + '</div>';
		
		_html += '<div style="cursor:default; width:200px; font-family:arial,sans-serif; font-size:11px; text-align:left; color:'+_clr_name+'; opacity:0.75;">Press keys to assign to the control (up to five).  Click on keys to remove them.</div>';
		
		_html += '<div style="height:15px;"></div>';
		
		_html += '<table cellspacing="0" cellpadding="0"><tr>';
		_html += '<td><div style="width:10px;"></div></td>';
		_html += '<td>' + this._toolbar._dialog_button('arrow_turn_left.png', 'Cancel', "_do_cancel_edit()") + '</td>';
		_html += '<td><div style="width:30px;"></div></td>';
		_html += '<td>' + this._toolbar._dialog_button('accept.png', '<b>OK</b>', "_do_set_key()") + '</td>';
		_html += '<td><div style="width:10px;"></div></td>';
		_html += '</tr></table>';
				
		this._toolbar._show_dialog(this, 0, _html);
		
		// hook keyboard
		gGame.setHandler( 'keyintercept', [this, '_add_key_code'] );
		gGame._keysActive = true;
	},
	
	_render_edit_key_codes: function() {
		// compose HTML for editing key codes on one keydef
		var _clr_name = (this._toolbar.theme == 'dark') ? 'white' : 'black';
		var _html = '';
		
		for (var _idx = 0, _len = this._codes.length; _idx < _len; _idx++) {
			var _code = this._codes[_idx];
			_html += '<div style="float:left; padding:5px; margin:4px; border:1px solid '+_clr_name+';cursor:pointer; opacity:0.75; font-family:courier,monospace; font-size:12px; font-weight:bold; color:'+_clr_name+';" onClick="gToolbar._dialogHandler._remove_key_code('+_idx+')" onMouseOver="this.style.opacity=1.0;" onMouseOut="this.style.opacity=0.75;">' + gGame._getNiceKeyName(_code) + '</div>';
		} // foreach code
		
		_html += '<div style="clear:both;"></div>';
		return _html;
	},
	
	_add_key_code: function(e, _code) {
		// capture key down and add key
		if ((this._codes.length < 5) && !_find_in_array(this._codes, _code)) {
			this._codes.push( _code );
			el('d_key_codes').innerHTML = this._render_edit_key_codes();
		}
		return false; // stop event
	},
	
	_remove_key_code: function(_idx) {
		// remove one key from the list
		this._codes.splice( _idx, 1 );
		el('d_key_codes').innerHTML = this._render_edit_key_codes();
	},
	
	_do_cancel_edit: function() {
		// cancel keydef edit and return to main key display
		delete this._keydef;
		delete this._codes;
		gGame._keysActive = false;
		delete gGame.handlers.keyintercept;
		this.onClick();
	},
	
	_do_set_key: function() {
		// commit changes to key
		gGame.keys[ this._keydef.Name ].code = this._codes;
		this._do_cancel_edit();
	},
	
	_do_cancel: function() {
		// cancel key dialog, return to game
		if (this._keydef) {
			// unhook keyboard
			gGame._keysActive = false;
			delete gGame.handlers.keyintercept;
			delete this._keydef;
			delete this._codes;
		}
		
		// restore keys before user started editing
		for (var _key in gGame.keys) {
			gGame.keys[_key].code = this._save_codes[_key];
		}
		delete this._save_codes;
		
		this._toolbar._hide_dialog();
	},
	
	_do_save: function() {
		// save keydef changes to cookie
		// TODO: if user is logged in, save to profile?
		gGame._game_prefs.keys = this._get_pkeys();
		gGame._cookie.save();
		delete this._save_codes;
		this._toolbar._hide_dialog();
	},
	
	_shutdown: function() {
		// called by Toolbar._hide_dialog()
		if (this._keydef) {
			// unhook keyboard
			gGame._keysActive = false;
			delete gGame.handlers.keyintercept;
			delete this._keydef;
			delete this._codes;
		}
	}
	
} );

Toolbar.Icon.extend( 'Toolbar.Icon.Music', {
	
	clip_x: 5 * 24,
	title: 'Toggle Music',
	
	onClick: function() {
		if (gGame._game_prefs.music == 1) {
			// disable music
			Debug.trace('toolbar', "Disabling music");
			gAudio.quietCategory('music');
			gAudio._categorySettings['music'].enabled = false;
			this.clip_x = 6 * 24;
			gGame._game_prefs.music = 0;
			gGame.fireHandler('onDisableMusic');
		}
		else {
			// enable music
			Debug.trace('toolbar', "Enabling music");
			gAudio._categorySettings['music'].enabled = true;
			this.clip_x = 5 * 24;
			gGame._game_prefs.music = 1;
			if (gGame.inGame) gGame.fireHandler('onEnableMusic');
		}
		this.refresh();
		gGame._cookie.save();
	},
	
	update: function() {
		if (gGame._game_prefs.music == 1) this.clip_x = 5 * 24;
		else this.clip_x = 6 * 24;
		this.refresh();
	}
	
} );

Toolbar.Icon.extend( 'Toolbar.Icon.Sound', {
	
	clip_x: 7 * 24,
	title: 'Toggle Sound',
	
	onClick: function() {
		if (gGame._game_prefs.sound == 1) {
			// disable sound
			Debug.trace('toolbar', "Disabling sound");
			gAudio.quiet();
			gAudio.enabled = false;
			Effect.VideoManager._update_volume();
			this.clip_x = 8 * 24;
			gGame._game_prefs.sound = 0;
			gGame.fireHandler('onDisableSound');
		}
		else if (!gAudio.fatal) {
			// enable sound
			Debug.trace('toolbar', "Enabling sound");
			gAudio.enabled = true;
			Effect.VideoManager._update_volume();
			this.clip_x = 7 * 24;
			gGame._game_prefs.sound = 1;
			gGame.fireHandler('onEnableSound');
			if (gGame._game_prefs.music == 1) gGame.fireHandler('onEnableMusic');
		}
		this.refresh();
		gGame._cookie.save();
	},
	
	audioloaderror: function() {
		// audio failed to load, disable icon?
		this.clip_x = 8 * 24;
		this.refresh();
	},
	
	update: function() {
		if ((gGame._game_prefs.sound == 1) && !gAudio.fatal) this.clip_x = 7 * 24;
		else this.clip_x = 8 * 24;
		this.refresh();
	}
	
} );

Toolbar.Icon.extend( 'Toolbar.Icon.Zoom', {
	
	clip_x: 9 * 24,
	title: 'Toggle Zoom',
	
	onClick: function() {
		if (gGame.changingZoom) return;
		if (this._toolbar._dialogActive) this._toolbar._hide_dialog( true || 'no_splash' );
		
		Debug.trace('toolbar', 'Zooming');
		
		var _old_zoom = Effect.Port.getZoomLevel();
		var _width = Effect.Port.portWidth;
		var _height = Effect.Port.portHeight;
		Debug.trace('toolbar', "Current zoom: " + _old_zoom + "X (" + Math.floor(_width * _old_zoom) + 'x' + Math.floor(_height * _old_zoom) + ")");
		
		var _max_width = screen.availWidth;
		var _max_height = screen.availHeight;
		Debug.trace('toolbar', "Screen max avail size: " + _max_width + 'x' + _max_height);
		
		var _max_level_x = Math.floor( _max_width / _width );
		var _max_level_y = Math.floor( _max_height / _height );
		var _max_level = Math.min( _max_level_x, _max_level_y );
		if (!_max_level) _max_level = 1;
		Debug.trace('toolbar', "Max zoom level: " + _max_level);
		
		var _zoom = _old_zoom + 1;
		if (_zoom > Math.min(_max_level, 4)) _zoom = 1;
		
		if (_zoom != _old_zoom) {
			// resize window, if needed
			var _zWidth = (_width * _zoom) + 100; // some padding
			var _zHeight = (_height * _zoom) + 120;
			var _doc_size = _getInnerWindowSize();
			
			Debug.trace('toolbar', "Zooming to level " + _zoom + 'X');
			Debug.trace('toolbar', "Current inner window size: " + _doc_size.width + 'x' + _doc_size.height);
			
			if ((_zWidth > _doc_size.width) || (_zHeight > _doc_size.height)) {
				var _new_window_width = Math.min( Math.max(_zWidth, _doc_size.width), _max_width );
				var _new_window_height = Math.min( Math.max(_zHeight, _doc_size.height), _max_height );
				Debug.trace('toolbar', "Resizing window to: " + _new_window_width + 'x' + _new_window_height);
				
				if (window.resizeTo) {
					window.resizeTo( _new_window_width, _new_window_height );
				}
				else if (window.outerWidth) {
					window.outerWidth = _new_window_width;
					window.outerHeight = _new_window_height;
				}
			}
			
			// save new zoom level in cookie
			gGame._game_prefs.zoom = _zoom;
			gGame._cookie.save();
			
			el('et_icon_shelf').hide();
			gGame.changeZoomLevel(_zoom);
		} // change zoom level
	}
	
} );
