////
// EffectSocket.js
// Provides TCP socket services through ActionScript 3
// 
// DHTML Game Engine 1.0
// Copyright (c) 2005 - 2008 Joseph Huckaby
////

// assumes globals:
// ua.ie: true for ie, false otherwise
// protocol: http or https
// assert
// debugstr

// usage:

/* 
	var socket = new _Socket( myLoaded );
 	function myLoaded() {
		socket.setHandler( 'onConnect', myConnected );
		socket.connect( '127.0.0.1', '8888' );
	}
	function myConnected() {
		socket.write( 'Hello World!' );
		var str = socket.read();
		alert(str);
		socket.close();
	}
*/

function _SocketManager() {
	// Socket Manager
	// maintain list of sockets and delegate events
	this._sockets = {};
	this._movieURL = 'engine/EffectSocket.swf';
	this._nextId = 1;
}

_SocketManager.prototype = {
	
	_add: function(_id, _socket) {
		this._sockets[_id] = _socket;
		if (typeof(gGame) != 'undefined') gGame._addSafeUnloadObject(_id);
	},
	
	onLoad: function(_id) {
		this._sockets[_id].onLoad();
	},
	
	onConnect: function(_id) {
		this._sockets[_id].onConnect(_id);
	},
	
	onError: function(_id, _msg) {
		_throwError("Socket Error: " + _id + ": " + _msg);
	},
	
	onClose: function(_id) {
		this._sockets[_id].onClose();
		delete this._sockets[_id];
	},
	
	onData: function(_id, _numBytes) {
		this._sockets[_id].onData(_numBytes);
	}
	
};

var gSocketManager = new _SocketManager();

// ActionScript Glue Functions
function Socket_onLoad(_id) { gSocketManager.onLoad(_id); }
function Socket_onConnect(_id) { gSocketManager.onConnect(_id); }
function Socket_onError(_id, _msg) { gSocketManager.onError(_id, _msg); }
function Socket_onClose(_id) { gSocketManager.onClose(_id); }
function Socket_onData(_id, _numBytes) { gSocketManager.onData(_id, _numBytes); }

// Socket Class:

function _Socket(_callback) {
	// Socket
	if (_callback) this.setHandler( 'onLoad', _callback );
	
	this._movie = null;
	this.id = gSocketManager._nextId++;
	debugstr("Creating new socket with ID: " + this.id);
	
	var _div = document.createElement('div');
	_div.id = 'd_socket_' + this.id;
	_div.setAttribute('id', 'd_socket_'+this.id);
	
	var _style = _div.style;
	_style.position = 'absolute';
	_style.left = '-200px';
	_style.top = '-200px';
	_style.width = '1px';
	_style.height = '1px';
	
	var _html = '';
	if (ua.ie) {
		_html += '<object classid="clsid:d27cdb6e-ae6d-11cf-96b8-444553540000" codebase="'+_protocol+'://download.macromedia.com/pub/shockwave/cabs/flash/swflash.cab#version=9,0,0,0" width="1" height="1" id="swf_socket_'+this.id+'" align="middle"><param name="allowScriptAccess" value="always" /><param name="allowFullScreen" value="false" /><param name="movie" value="'+gSocketManager._movieURL+'" /><param name="loop" value="false" /><param name="menu" value="false" /><param name="quality" value="best" /><param name="bgcolor" value="#ffffff" /><param name="flashvars" value="id='+this.id+'"/></object>';
	}
	else {
		_html += '<embed id="swf_socket_'+this.id+'" src="'+gSocketManager._movieURL+'" loop="false" menu="false" quality="best" bgcolor="#ffffff" width="1" height="1" name="webcam_movie" align="middle" allowScriptAccess="always" allowFullScreen="false" type="application/x-shockwave-flash" pluginspage="http://www.macromedia.com/go/getflashplayer" flashvars="id='+this.id+'" />';
	}
	
	document.getElementsByTagName('body')[0].appendChild(_div);
	_div.innerHTML = _html;
	
	gSocketManager._add(this.id, this);
}

// Inherit from EventHandlerBase
_Socket.prototype = merge_objects( _EventHandlerBase.prototype, {
	
	_loaded: false,
	_connected: false,
	
	_connect: function(_host, _port) {
		// open new socket connection
		assert(this._movie, "Socket movie not loaded: " + this.id);
		debugstr("Connecting to server: " + _host + ":" + _port);
		this._movie.connect(_host, _port);
	},
	
	_write: function(_data) {
		assert(this._movie, "Socket movie not loaded: " + this.id);
		assert(this._connected, "Socket is not connected: " + this.id);
		debugstr("Writing data to socket: " + this.id + ": " + _data);
		this._movie.write(_data);
	},
	
	_read: function() {
		assert(this._movie, "Socket movie not loaded: " + this.id);
		assert(this._connected, "Socket is not connected: " + this.id);
		debugstr("Reading data from socket: " + this.id);
		return this._movie.read();
	},
	
	_close: function() {
		assert(this._movie, "Socket movie not loaded: " + this.id);
		assert(this._connected, "Socket is not connected: " + this.id);
		debugstr("Closing socket connection: " + this.id);
		this._movie.close();
	},
	
	_destroy: function() {
		this._connected = false;
		this._movie = null;
		setTimeout( function() {
			try { document.body.removeChild( document.getElementById('d_socket_'+this.id) ); } catch(e) {;}
		}, 1 );
	},
	
	// Callbacks:
	
	onLoad: function() {
		// notification that movie is loaded
		debugstr("Socket is loaded and ready: " + this.id);
		this._loaded = true;
		this._movie = document.getElementById('swf_socket_' + this.id);
		if (!this._movie) return _throwError("ASSERT FAILURE: Cannot locate socket movie: swf_socket_" + this.id);
		this.fireHandler('onLoad');
	},
	
	onConnect: function() {
		debugstr("Connection established: " + this.id);
		this._connected = true;
		this.fireHandler('onConnect');
	},
	
	onClose: function() {
		debugstr("Closed socket: " + this.id);
		this._connected = false;
		this.fireHandler('onClose');
	},
	
	onData: function(_numBytes) {
		debugstr("Data is available to be read: " + this.id + ": " + _numBytes + " bytes");
		this.fireHandler('onData', _numBytes);
	}
	
} );

